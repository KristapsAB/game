{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n\n  const generateRandomCards = () => {\n    const initialCards = symbols.map((symbol, index) => Array.from({\n      length: 3\n    }, () => ({\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      type: index\n    }))).flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n      if (timer >= gameDuration) {\n        // Game duration reached, reset the game\n        resetGame();\n      }\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setCards(prevCards => prevCards.map((card, i) => i === index ? {\n          ...card,\n          flipped: false\n        } : card));\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      alert('Congratulations! You found all matching symbols.');\n      resetGame();\n    }\n  };\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n  };\n  const useHint = () => {\n    if (!hintUsed) {\n      const firstUnmatchedIndex = cards.findIndex(card => !card.matched && !card.flipped);\n      if (firstUnmatchedIndex !== -1) {\n        setHintUsed(true);\n        setCards(prevCards => prevCards.map((card, i) => i === firstUnmatchedIndex ? {\n          ...card,\n          flipped: true\n        } : card));\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map((card, i) => i === firstUnmatchedIndex ? {\n            ...card,\n            flipped: false\n          } : card));\n        }, hintDelay);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: useHint,\n        disabled: hintUsed,\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n        onClick: () => handleCardClick(index),\n        children: card.flipped && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [renderCornerSymbol(card.type), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.img,\n            alt: \"Icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"g+HFlgPNzHcezdaWIMM2av5VaB0=\");\n_c = Game;\nconst renderCornerSymbol = type => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symbol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text2\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\nconst formatTime = seconds => {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  return formattedTime;\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","spade","diamondSide","Clubs","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","symbols","numberOfMatchesToWin","hintDelay","gameDuration","generateRandomCards","initialCards","map","symbol","index","Array","from","length","id","Math","random","img","matched","type","flat","sort","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","checkingForMatch","setCheckingForMatch","hintUsed","setHintUsed","timer","setTimer","setTimeout","checkForMatch","intervalId","setInterval","prevTimer","resetGame","clearInterval","handleCardClick","includes","prevCards","card","i","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","slice","forEach","checkForWin","filter","alert","useHint","firstUnmatchedIndex","findIndex","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","formatTime","renderCornerSymbol","src","alt","_c","seconds","minutes","floor","remainingSeconds","formattedTime","toString","padStart","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst Game = () => {\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n\n  const generateRandomCards = () => {\n    const initialCards = symbols\n      .map((symbol, index) =>\n        Array.from({ length: 3 }, () => ({\n          id: Math.random(),\n          img: symbol,\n          matched: false,\n          type: index,\n        }))\n      )\n      .flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => prevTimer + 1);\n      if (timer >= gameDuration) {\n        // Game duration reached, reset the game\n        resetGame();\n      }\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === index ? { ...card, flipped: false } : card\n          )\n        );\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      alert('Congratulations! You found all matching symbols.');\n      resetGame();\n    }\n  };\n\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n  };\n\n  const useHint = () => {\n    if (!hintUsed) {\n      const firstUnmatchedIndex = cards.findIndex((card) => !card.matched && !card.flipped);\n      if (firstUnmatchedIndex !== -1) {\n        setHintUsed(true);\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === firstUnmatchedIndex ? { ...card, flipped: true } : card\n          )\n        );\n        setTimeout(() => {\n          setCards((prevCards) =>\n            prevCards.map((card, i) =>\n              i === firstUnmatchedIndex ? { ...card, flipped: false } : card\n            )\n          );\n        }, hintDelay);\n      }\n    }\n  };\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button onClick={useHint} disabled={hintUsed}>\n          HINT\n        </button>\n        <div className=\"timer-container\">{formatTime(timer)}</div>\n        <button onClick={resetGame}>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card, index) => (\n          <div\n            key={card.id}\n            className={`card1 ${card.flipped ? 'flipped' : ''} ${\n              card.matched ? 'matched' : ''\n            }`}\n            onClick={() => handleCardClick(index)}\n          >\n            {card.flipped && (\n              <>\n                {renderCornerSymbol(card.type)}\n                <img src={card.img} alt=\"Icon\" />\n              </>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst renderCornerSymbol = (type) => {\n  return (\n    <div className=\"symbol\">\n      <div className=\"top-left\">\n        <div className=\"text\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n      <div className=\"bottom-right\">\n        <div className=\"text2\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n    </div>\n  );\n};\n\nconst formatTime = (seconds) => {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds\n    .toString()\n    .padStart(2, '0')}`;\n  return formattedTime;\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}