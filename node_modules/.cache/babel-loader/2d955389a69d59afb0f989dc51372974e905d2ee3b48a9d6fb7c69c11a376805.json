{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cardTypes = [{\n  id: 1,\n  img: hearts,\n  text: 'A',\n  sideImg: heart164,\n  customText: 'A'\n}, {\n  id: 2,\n  img: spade,\n  text: 'A',\n  sideImg: spade,\n  customText: 'A'\n}, {\n  id: 3,\n  img: diamond,\n  text: 'A',\n  sideImg: diamondSide,\n  customText: 'A'\n}, {\n  id: 4,\n  img: Clubs,\n  text: 'A',\n  sideImg: Clubs,\n  customText: 'A'\n}];\nconst Game = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n  useEffect(() => {\n    resetGame();\n  }, []); // Initial setup\n\n  useEffect(() => {\n    if (correctMatches === cardTypes.length * 2) {\n      setIsGameFinished(true);\n      // Handle game completion (e.g., show a message or perform any other action)\n    }\n  }, [correctMatches]);\n  const resetGame = () => {\n    const initialCards = [];\n    cardTypes.forEach(type => {\n      // Create two cards for each type\n      initialCards.push({\n        ...type,\n        id: type.id * 2 - 1,\n        isFlipped: false,\n        matched: false\n      });\n      initialCards.push({\n        ...type,\n        id: type.id * 2,\n        isFlipped: false,\n        matched: false\n      });\n    });\n    setCards(shuffleArray(initialCards));\n    setIsGameFinished(false);\n    setCorrectMatches(0);\n    setSelectedCards([]);\n    setIncorrectAttempts(0);\n  };\n  const shuffleArray = array => {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  };\n  const handleCardClick = id => {\n    if (isGameFinished || selectedCards.length >= 2) {\n      // Game is already finished or 2 cards are already selected, do nothing\n      return;\n    }\n\n    // Find the clicked card\n    const clickedCard = cards.find(card => card.id === id);\n\n    // Check if the clicked card is already flipped or matched\n    if (clickedCard.isFlipped || clickedCard.matched) {\n      // If the card is already flipped or matched, do nothing\n      return;\n    }\n\n    // Flip the clicked card\n    setCards(prevCards => prevCards.map(card => card.id === id ? {\n      ...card,\n      isFlipped: true\n    } : card));\n\n    // Add the clicked card to the selected cards\n    setSelectedCards(prevSelected => [...prevSelected, id]);\n\n    // Check if two cards are selected\n    if (selectedCards.length === 1) {\n      const selectedCardIds = [...selectedCards, id];\n      const selectedCardTypes = selectedCardIds.map(cardId => {\n        const selectedCard = cards.find(card => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // If the selected cards are not identical, increase incorrect attempts\n      if (selectedCardTypes[0] !== selectedCardTypes[1]) {\n        setIncorrectAttempts(prevAttempts => {\n          const updatedAttempts = prevAttempts + 1;\n          // Check if two consecutive incorrect attempts have been made\n          if (updatedAttempts >= 2) {\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => selectedCardIds.includes(card.id) ? {\n                ...card,\n                isFlipped: false\n              } : card));\n              setSelectedCards([]); // Reset selected cards after flipping back\n              setIncorrectAttempts(0); // Reset incorrect attempts after flipping back\n            }, 1000); // Delay for a moment before flipping back\n          }\n          return updatedAttempts;\n        });\n      } else {\n        // If the selected cards are identical, mark them as matched\n        setCards(prevCards => prevCards.map(card => selectedCardIds.includes(card.id) ? {\n          ...card,\n          matched: true\n        } : card));\n        setCorrectMatches(prevMatches => prevMatches + 2); // Increase by 2 for each correct match\n\n        // Reset selected cards and incorrect attempts on a correct match\n        setSelectedCards([]);\n        setIncorrectAttempts(0);\n      }\n    }\n  };\n  const handleGiveUp = () => {\n    // Reset the game when the user gives up\n    resetGame();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: \"02:69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGiveUp,\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.isFlipped ? 'flipped' : ''}`,\n        onClick: () => handleCardClick(card.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.text, /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.sideImg,\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : '?'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n            src: card.isFlipped ? card.img : '',\n            alt: card.alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''} ${card.id === 4 ? 'top-left-rotate' : card.id === 5 ? 'top-left-rotate' : card.id === 6 ? 'top-left-rotate' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.id === 4 || card.id === 5 || card.id === 6 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"special-text\",\n              children: card.customText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 21\n            }, this) : card.customText, /*#__PURE__*/_jsxDEV(\"img\", {\n              className: `bottom-right-image ${card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''}`,\n              src: card.isFlipped ? card.sideImg : '',\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-container ${!card.isFlipped ? 'no-border' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Ao2J1LB4zsfovTsSb6fNSBGF9NU=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","heart164","spade","diamond","diamondSide","Clubs","jsxDEV","_jsxDEV","Fragment","_Fragment","cardTypes","id","img","text","sideImg","customText","Game","_s","cards","setCards","isGameFinished","setIsGameFinished","correctMatches","setCorrectMatches","selectedCards","setSelectedCards","incorrectAttempts","setIncorrectAttempts","resetGame","length","initialCards","forEach","type","push","isFlipped","matched","shuffleArray","array","shuffledArray","slice","i","j","Math","floor","random","handleCardClick","clickedCard","find","card","prevCards","map","prevSelected","selectedCardIds","selectedCardTypes","cardId","selectedCard","prevAttempts","updatedAttempts","setTimeout","includes","prevMatches","handleGiveUp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst cardTypes = [\n  { id: 1, img: hearts, text: 'A', sideImg: heart164, customText: 'A' },\n  { id: 2, img: spade, text: 'A', sideImg: spade, customText: 'A' },\n  { id: 3, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A' },\n  { id: 4, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A' },\n];\n\nconst Game = () => {\n  const [cards, setCards] = useState([]);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n\n  useEffect(() => {\n    resetGame();\n  }, []); // Initial setup\n\n  useEffect(() => {\n    if (correctMatches === cardTypes.length * 2) {\n      setIsGameFinished(true);\n      // Handle game completion (e.g., show a message or perform any other action)\n    }\n  }, [correctMatches]);\n\n  const resetGame = () => {\n    const initialCards = [];\n    cardTypes.forEach((type) => {\n      // Create two cards for each type\n      initialCards.push({ ...type, id: type.id * 2 - 1, isFlipped: false, matched: false });\n      initialCards.push({ ...type, id: type.id * 2, isFlipped: false, matched: false });\n    });\n\n    setCards(shuffleArray(initialCards));\n    setIsGameFinished(false);\n    setCorrectMatches(0);\n    setSelectedCards([]);\n    setIncorrectAttempts(0);\n  };\n\n  const shuffleArray = (array) => {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  };\n\n  const handleCardClick = (id) => {\n    if (isGameFinished || selectedCards.length >= 2) {\n      // Game is already finished or 2 cards are already selected, do nothing\n      return;\n    }\n\n    // Find the clicked card\n    const clickedCard = cards.find((card) => card.id === id);\n\n    // Check if the clicked card is already flipped or matched\n    if (clickedCard.isFlipped || clickedCard.matched) {\n      // If the card is already flipped or matched, do nothing\n      return;\n    }\n\n    // Flip the clicked card\n    setCards((prevCards) =>\n      prevCards.map((card) =>\n        card.id === id ? { ...card, isFlipped: true } : card\n      )\n    );\n\n    // Add the clicked card to the selected cards\n    setSelectedCards((prevSelected) => [...prevSelected, id]);\n\n    // Check if two cards are selected\n    if (selectedCards.length === 1) {\n      const selectedCardIds = [...selectedCards, id];\n\n      const selectedCardTypes = selectedCardIds.map((cardId) => {\n        const selectedCard = cards.find((card) => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // If the selected cards are not identical, increase incorrect attempts\n      if (selectedCardTypes[0] !== selectedCardTypes[1]) {\n        setIncorrectAttempts((prevAttempts) => {\n          const updatedAttempts = prevAttempts + 1;\n          // Check if two consecutive incorrect attempts have been made\n          if (updatedAttempts >= 2) {\n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) =>\n                  selectedCardIds.includes(card.id) ? { ...card, isFlipped: false } : card\n                )\n              );\n              setSelectedCards([]); // Reset selected cards after flipping back\n              setIncorrectAttempts(0); // Reset incorrect attempts after flipping back\n            }, 1000); // Delay for a moment before flipping back\n          }\n          return updatedAttempts;\n        });\n      } else {\n        // If the selected cards are identical, mark them as matched\n        setCards((prevCards) =>\n          prevCards.map((card) =>\n            selectedCardIds.includes(card.id) ? { ...card, matched: true } : card\n          )\n        );\n        setCorrectMatches((prevMatches) => prevMatches + 2); // Increase by 2 for each correct match\n\n        // Reset selected cards and incorrect attempts on a correct match\n        setSelectedCards([]);\n        setIncorrectAttempts(0);\n      }\n    }\n  };\n\n  const handleGiveUp = () => {\n    // Reset the game when the user gives up\n    resetGame();\n  };\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button>HINT</button>\n        <div className=\"timer-container\">02:69</div>\n        <button onClick={handleGiveUp}>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card) => (\n          <div\n            className={`card1 ${card.isFlipped ? 'flipped' : ''}`}\n            key={card.id}\n            onClick={() => handleCardClick(card.id)}\n          >\n            <div\n              className={`card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.text}\n                  <img src={card.sideImg} alt={card.alt} />\n                </>\n              ) : (\n                '?'\n              )}\n            </div>\n            <div className={`heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`}>\n              <img\n                className={`hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`}\n                src={card.isFlipped ? card.img : ''}\n                alt={card.alt}\n              />\n            </div>\n            <div\n              className={`card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''\n              } ${\n                card.id === 4\n                  ? 'top-left-rotate'\n                  : card.id === 5\n                  ? 'top-left-rotate'\n                  : card.id === 6\n                  ? 'top-left-rotate'\n                  : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.id === 4 || card.id === 5 || card.id === 6 ? (\n                    <p className=\"special-text\">{card.customText}</p>\n                  ) : (\n                    card.customText\n                  )}\n                  <img\n                    className={`bottom-right-image ${\n                      card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''\n                    }`}\n                    src={card.isFlipped ? card.sideImg : ''}\n                    alt={card.alt}\n                  />\n                </>\n              ) : null}\n            </div>\n            {/* Add condition to apply border class only when not flipped */}\n            <div className={`border-container ${!card.isFlipped ? 'no-border' : ''}`}>\n              {/* Your border content here */}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}