{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [cards, setCards] = useState([{\n    id: 1,\n    img: hearts,\n    text: 'A',\n    sideImg: heart164,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 2,\n    img: hearts,\n    text: 'A',\n    sideImg: heart164,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 3,\n    img: hearts,\n    text: 'A',\n    sideImg: heart164,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 4,\n    img: spade,\n    text: 'A',\n    sideImg: spade,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 5,\n    img: spade,\n    text: 'A',\n    sideImg: spade,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 6,\n    img: spade,\n    text: 'A',\n    sideImg: spade,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 7,\n    img: diamond,\n    text: 'A',\n    sideImg: diamondSide,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 8,\n    img: diamond,\n    text: 'A',\n    sideImg: diamondSide,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 9,\n    img: diamond,\n    text: 'A',\n    sideImg: diamondSide,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 10,\n    img: Clubs,\n    text: 'A',\n    sideImg: Clubs,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 11,\n    img: Clubs,\n    text: 'A',\n    sideImg: Clubs,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 12,\n    img: Clubs,\n    text: 'A',\n    sideImg: Clubs,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }]);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n  useEffect(() => {\n    setCards(cards => shuffleArray(cards));\n  }, []);\n  function shuffleArray(array) {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  }\n  const handleCardClick = id => {\n    var _cards$find;\n    if (isGameFinished || selectedCards.length >= 3 || (_cards$find = cards.find(card => card.id === id)) !== null && _cards$find !== void 0 && _cards$find.isFlipped) {\n      // Game is already finished, or 3 cards are already selected, or the clicked card is already flipped, do nothing\n      return;\n    }\n    setCards(prevCards => prevCards.map(card => card.id === id ? {\n      ...card,\n      isFlipped: true\n    } : card));\n    setSelectedCards(prevSelected => [...prevSelected, id]);\n\n    // Check if three cards are selected\n    if (selectedCards.length === 2) {\n      const selectedCardTypes = selectedCards.map(cardId => {\n        const selectedCard = cards.find(card => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // If the selected cards are not identical, increase incorrect attempts\n      if (selectedCardTypes[0] !== selectedCardTypes[1]) {\n        setIncorrectAttempts(prevAttempts => {\n          const updatedAttempts = prevAttempts + 1;\n          // Check if three consecutive incorrect attempts have been made\n          if (updatedAttempts >= 2) {\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => selectedCards.includes(card.id) ? {\n                ...card,\n                isFlipped: false\n              } : card));\n              setSelectedCards([]); // Reset selected cards after flipping back\n              setIncorrectAttempts(0); // Reset incorrect attempts after flipping back\n            }, 1000); // Delay for a moment before flipping back\n          }\n          return updatedAttempts;\n        });\n      } else {\n        // If the selected cards are identical, mark them as matched\n        setCards(prevCards => prevCards.map(card => selectedCards.includes(card.id) ? {\n          ...card,\n          matched: true\n        } : card));\n        setCorrectMatches(prevMatches => prevMatches + 1);\n\n        // Reset selected cards and incorrect attempts on a correct match\n        setSelectedCards([]);\n        setIncorrectAttempts(0);\n\n        // Check if the required number of correct matches is reached\n        if (correctMatches + 1 === 3) {\n          setIsGameFinished(true);\n          // Handle game completion (e.g., show a message or perform any other action)\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: \"02:69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.isFlipped ? 'flipped' : ''}`,\n        onClick: () => handleCardClick(card.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.text, /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.sideImg,\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : '?'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n            src: card.isFlipped ? card.img : '',\n            alt: card.alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''} ${card.id === 4 ? 'top-left-rotate' : card.id === 5 ? 'top-left-rotate' : card.id === 6 ? 'top-left-rotate' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.id === 4 || card.id === 5 || card.id === 6 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"special-text\",\n              children: card.customText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 21\n            }, this) : card.customText, /*#__PURE__*/_jsxDEV(\"img\", {\n              className: `bottom-right-image ${card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''}`,\n              src: card.isFlipped ? card.sideImg : '',\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-container ${!card.isFlipped ? 'no-border' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"4lfV8oEeZGn7s79TRIpaCXQ5YVk=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","heart164","spade","diamond","diamondSide","Clubs","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","cards","setCards","id","img","text","sideImg","customText","isFlipped","matched","isGameFinished","setIsGameFinished","correctMatches","setCorrectMatches","selectedCards","setSelectedCards","incorrectAttempts","setIncorrectAttempts","shuffleArray","array","shuffledArray","slice","i","length","j","Math","floor","random","handleCardClick","_cards$find","find","card","prevCards","map","prevSelected","selectedCardTypes","cardId","selectedCard","prevAttempts","updatedAttempts","setTimeout","includes","prevMatches","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst Game = () => {\n  const [cards, setCards] = useState([\n    { id: 1, img: hearts, text: 'A', sideImg: heart164, customText: 'A', isFlipped: false, matched: false },\n    { id: 2, img: hearts, text: 'A', sideImg: heart164, customText: 'A', isFlipped: false, matched: false },\n    { id: 3, img: hearts, text: 'A', sideImg: heart164, customText: 'A', isFlipped: false, matched: false },\n    { id: 4, img: spade, text: 'A', sideImg: spade, customText: 'A', isFlipped: false, matched: false },\n    { id: 5, img: spade, text: 'A', sideImg: spade, customText: 'A', isFlipped: false, matched: false },\n    { id: 6, img: spade, text: 'A', sideImg: spade, customText: 'A', isFlipped: false, matched: false },\n    { id: 7, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A', isFlipped: false, matched: false },\n    { id: 8, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A', isFlipped: false, matched: false },\n    { id: 9, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A', isFlipped: false, matched: false },\n    { id: 10, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A', isFlipped: false, matched: false },\n    { id: 11, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A', isFlipped: false, matched: false },\n    { id: 12, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A', isFlipped: false, matched: false },\n  ]);\n\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n\n  useEffect(() => {\n    setCards((cards) => shuffleArray(cards));\n  }, []);\n\n  function shuffleArray(array) {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  }\n\n  const handleCardClick = (id) => {\n    if (isGameFinished || selectedCards.length >= 3 || cards.find(card => card.id === id)?.isFlipped) {\n      // Game is already finished, or 3 cards are already selected, or the clicked card is already flipped, do nothing\n      return;\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card) =>\n        card.id === id ? { ...card, isFlipped: true } : card\n      )\n    );\n\n    setSelectedCards((prevSelected) => [...prevSelected, id]);\n\n    // Check if three cards are selected\n    if (selectedCards.length === 2) {\n      const selectedCardTypes = selectedCards.map((cardId) => {\n        const selectedCard = cards.find((card) => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // If the selected cards are not identical, increase incorrect attempts\n      if (selectedCardTypes[0] !== selectedCardTypes[1]) {\n        setIncorrectAttempts((prevAttempts) => {\n          const updatedAttempts = prevAttempts + 1;\n          // Check if three consecutive incorrect attempts have been made\n          if (updatedAttempts >= 2) {\n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) =>\n                  selectedCards.includes(card.id) ? { ...card, isFlipped: false } : card\n                )\n              );\n              setSelectedCards([]); // Reset selected cards after flipping back\n              setIncorrectAttempts(0); // Reset incorrect attempts after flipping back\n            }, 1000); // Delay for a moment before flipping back\n          }\n          return updatedAttempts;\n        });\n      } else {\n        // If the selected cards are identical, mark them as matched\n        setCards((prevCards) =>\n          prevCards.map((card) =>\n            selectedCards.includes(card.id) ? { ...card, matched: true } : card\n          )\n        );\n        setCorrectMatches((prevMatches) => prevMatches + 1);\n\n        // Reset selected cards and incorrect attempts on a correct match\n        setSelectedCards([]);\n        setIncorrectAttempts(0);\n\n        // Check if the required number of correct matches is reached\n        if (correctMatches + 1 === 3) {\n          setIsGameFinished(true);\n          // Handle game completion (e.g., show a message or perform any other action)\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button>HINT</button>\n        <div className=\"timer-container\">02:69</div>\n        <button>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card) => (\n          <div\n            className={`card1 ${card.isFlipped ? 'flipped' : ''}`}\n            key={card.id}\n            onClick={() => handleCardClick(card.id)}\n          >\n            <div\n              className={`card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.text}\n                  <img src={card.sideImg} alt={card.alt} />\n                </>\n              ) : (\n                '?'\n              )}\n            </div>\n            <div className={`heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`}>\n              <img\n                className={`hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`}\n                src={card.isFlipped ? card.img : ''}\n                alt={card.alt}\n              />\n            </div>\n            <div\n              className={`card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''\n              } ${\n                card.id === 4\n                  ? 'top-left-rotate'\n                  : card.id === 5\n                  ? 'top-left-rotate'\n                  : card.id === 6\n                  ? 'top-left-rotate'\n                  : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.id === 4 || card.id === 5 || card.id === 6 ? (\n                    <p className=\"special-text\">{card.customText}</p>\n                  ) : (\n                    card.customText\n                  )}\n                  <img\n                    className={`bottom-right-image ${\n                      card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''\n                    }`}\n                    src={card.isFlipped ? card.sideImg : ''}\n                    alt={card.alt}\n                  />\n                </>\n              ) : null}\n            </div>\n            {/* Add condition to apply border class only when not flipped */}\n            <div className={`border-container ${!card.isFlipped ? 'no-border' : ''}`}>\n              {/* Your border content here */}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}