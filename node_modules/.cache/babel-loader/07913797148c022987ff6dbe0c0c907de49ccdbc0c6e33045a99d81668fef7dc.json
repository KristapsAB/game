{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game 2/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css';\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n  const navigate = useNavigate();\n  const [insufficientCoins, setInsufficientCoins] = useState(false);\n  const generateRandomCards = () => {\n    const initialCards = symbols.map((symbol, index) => Array.from({\n      length: 3\n    }, () => ({\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      type: index\n    }))).flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const handleRetry = () => {\n    setShowGiveUpPopup(false);\n    resetGame();\n  };\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n  const [showGiveUpPopup, setShowGiveUpPopup] = useState(false);\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n  }, []);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If the game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n  useEffect(() => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setCards(prevCards => prevCards.map((card, i) => i === index ? {\n          ...card,\n          flipped: false\n        } : card));\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n    setShowGiveUpPopup(false); // Hide the \"Give Up\" popup on reset\n  };\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Fetch the user's coin balance\n        const coinBalanceResponse = await fetch(`http://localhost:8888/game/getUserCoins.php?userId=${userId}`);\n        if (!coinBalanceResponse.ok) {\n          console.error(`HTTP error! Status: ${coinBalanceResponse.status}`);\n          console.log('Response text:', await coinBalanceResponse.text());\n          return;\n        }\n        const coinBalanceResult = await coinBalanceResponse.json();\n        if (!coinBalanceResult.success) {\n          console.error('Failed to fetch coin balance:', coinBalanceResult.message);\n          return;\n        }\n        const userCoinBalance = coinBalanceResult.coinBalance;\n\n        // Check if the user has enough coins\n        if (userCoinBalance > 0) {\n          // Deduct coins from the database\n          const url = 'http://localhost:8888/game/deductCoinsForHint.php';\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: `userId=${userId}`,\n            credentials: 'include',\n            mode: 'cors'\n          });\n          if (!response.ok) {\n            console.error(`HTTP error! Status: ${response.status}`);\n            console.log('Response text:', await response.text());\n            return;\n          }\n          const result = await response.json();\n          if (result.success) {\n            // Coins deducted successfully, now reveal the cards\n            setHintUsed(true);\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => ({\n                ...card,\n                flipped: true\n              })));\n            }, 0);\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => ({\n                ...card,\n                flipped: card.matched ? true : false\n              })));\n              setHintUsed(false);\n            }, hintDelay);\n          } else {\n            console.error('Failed to deduct coins:', result.message);\n          }\n        } else {\n          // User doesn't have enough coins\n          console.log('User has 0 coins. Cannot use hint.');\n\n          // Display insufficient coins message\n          setInsufficientCoins(true);\n\n          // Hide the message after a few seconds (e.g., 3 seconds)\n          setTimeout(() => {\n            setInsufficientCoins(false);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      // Replace the URL with the actual URL of your PHP script\n      const url = 'http://localhost:8888/game/saveScore.php';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include',\n        // Add this line\n        mode: 'cors' // Add this line\n      });\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Score updated successfully\n\n        // Check if the game is completed before adding coins\n        if (gameCompleted) {\n          const coinsEarned = 5;\n          const updateCoinsUrl = 'http://localhost:8888/game/updateCoins.php'; // Replace with the actual URL\n          const updateCoinsResponse = await fetch(updateCoinsUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: `userId=${userId}&coins=${coinsEarned}`,\n            credentials: 'include',\n            // Add this line\n            mode: 'cors' // Add this line\n          });\n          if (!updateCoinsResponse.ok) {\n            console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n            console.log('Response text:', await updateCoinsResponse.text());\n            return;\n          }\n          const updateCoinsResult = await updateCoinsResponse.json();\n          if (updateCoinsResult.success) {\n            console.log('Coins updated successfully');\n          } else {\n            console.error('Failed to update coins:', updateCoinsResult.message);\n          }\n        }\n        console.log('Score updated successfully');\n\n        // Redirect to the start page\n        // navigate('/levels'); // Replace '/start' with the actual route of your start page\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const calculateScore = () => {\n    // Implement the logic to calculate the score based on game performance\n    // You might consider factors like time taken, hints used, etc.\n    // For simplicity, let's assume a basic score for now.\n    return gameDuration - timer;\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [showGiveUpPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Press Play Again to Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRetry,\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }, this), gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Congratulations! You finished the game in ${formatTime(timer)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGameCompletion,\n          children: \"Save Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Redirecting to Levels'),\n          children: \"Go to Levels Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: useHint,\n        disabled: hintUsed,\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), insufficientCoins && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insufficient-coins-message\",\n        children: \"Insufficient coins. Earn more to use hints.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowGiveUpPopup(true),\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container-80\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(index),\n          children: card.flipped && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderCornerSymbol(card.type), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.img,\n              alt: \"Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Time has expired, you lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"9gL01W6Oa/OSdEjTxpc0EQQI8IU=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nconst renderCornerSymbol = type => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symbol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text2\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","spade","diamondSide","Clubs","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","symbols","numberOfMatchesToWin","hintDelay","gameDuration","navigate","insufficientCoins","setInsufficientCoins","generateRandomCards","initialCards","map","symbol","index","Array","from","length","id","Math","random","img","matched","type","flat","sort","handleRetry","setShowGiveUpPopup","resetGame","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","checkingForMatch","setCheckingForMatch","hintUsed","setHintUsed","timer","setTimer","gameOver","setGameOver","gameCompleted","setGameCompleted","userId","setUserId","showGiveUpPopup","storedUserId","sessionStorage","getItem","setTimeout","checkForMatch","intervalId","setInterval","prevTimer","clearInterval","filter","card","handleCardClick","includes","prevCards","i","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","slice","forEach","checkForWin","useHint","coinBalanceResponse","fetch","ok","console","error","status","log","text","coinBalanceResult","json","success","message","userCoinBalance","coinBalance","url","response","method","headers","body","credentials","mode","result","handleGameCompletion","level","score","calculateScore","coinsEarned","updateCoinsUrl","updateCoinsResponse","updateCoinsResult","formatTime","seconds","minutes","floor","remainingSeconds","formattedTime","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","disabled","renderCornerSymbol","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game 2/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css';\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { useNavigate } from 'react-router-dom';\n\nconst Game = () => {\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n  const navigate = useNavigate();\n  const [insufficientCoins, setInsufficientCoins] = useState(false);\n\n  const generateRandomCards = () => {\n    const initialCards = symbols\n      .map((symbol, index) =>\n        Array.from({ length: 3 }, () => ({\n          id: Math.random(),\n          img: symbol,\n          matched: false,\n          type: index,\n        }))\n      )\n      .flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const handleRetry = () => {\n    setShowGiveUpPopup(false);\n    resetGame();\n  };\n  \n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n  const [showGiveUpPopup, setShowGiveUpPopup] = useState(false);\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n  }, []);\n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If the game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n\n  useEffect(() => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === index ? { ...card, flipped: false } : card\n          )\n        );\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n    setShowGiveUpPopup(false); // Hide the \"Give Up\" popup on reset\n  };\n\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Fetch the user's coin balance\n        const coinBalanceResponse = await fetch(\n          `http://localhost:8888/game/getUserCoins.php?userId=${userId}`\n        );\n\n        if (!coinBalanceResponse.ok) {\n          console.error(`HTTP error! Status: ${coinBalanceResponse.status}`);\n          console.log('Response text:', await coinBalanceResponse.text());\n          return;\n        }\n\n        const coinBalanceResult = await coinBalanceResponse.json();\n\n        if (!coinBalanceResult.success) {\n          console.error('Failed to fetch coin balance:', coinBalanceResult.message);\n          return;\n        }\n\n        const userCoinBalance = coinBalanceResult.coinBalance;\n\n        // Check if the user has enough coins\n        if (userCoinBalance > 0) {\n          // Deduct coins from the database\n          const url = 'http://localhost:8888/game/deductCoinsForHint.php';\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: `userId=${userId}`,\n            credentials: 'include',\n            mode: 'cors',\n          });\n\n          if (!response.ok) {\n            console.error(`HTTP error! Status: ${response.status}`);\n            console.log('Response text:', await response.text());\n            return;\n          }\n\n          const result = await response.json();\n\n          if (result.success) {\n            // Coins deducted successfully, now reveal the cards\n            setHintUsed(true);\n\n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) => ({ ...card, flipped: true }))\n              );\n            }, 0);\n\n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) => ({\n                  ...card,\n                  flipped: card.matched ? true : false,\n                }))\n              );\n              setHintUsed(false);\n            }, hintDelay);\n          } else {\n            console.error('Failed to deduct coins:', result.message);\n          }\n        } else {\n          // User doesn't have enough coins\n          console.log('User has 0 coins. Cannot use hint.');\n\n          // Display insufficient coins message\n          setInsufficientCoins(true);\n\n          // Hide the message after a few seconds (e.g., 3 seconds)\n          setTimeout(() => {\n            setInsufficientCoins(false);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n\n  \n  \n\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      // Replace the URL with the actual URL of your PHP script\n      const url = 'http://localhost:8888/game/saveScore.php';\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include', // Add this line\n        mode: 'cors', // Add this line\n      });\n\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Score updated successfully\n\n        // Check if the game is completed before adding coins\n        if (gameCompleted) {\n          const coinsEarned = 5;\n\n          const updateCoinsUrl = 'http://localhost:8888/game/updateCoins.php'; // Replace with the actual URL\n          const updateCoinsResponse = await fetch(updateCoinsUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: `userId=${userId}&coins=${coinsEarned}`,\n            credentials: 'include', // Add this line\n            mode: 'cors', // Add this line\n          });\n\n          if (!updateCoinsResponse.ok) {\n            console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n            console.log('Response text:', await updateCoinsResponse.text());\n            return;\n          }\n\n          const updateCoinsResult = await updateCoinsResponse.json();\n\n          if (updateCoinsResult.success) {\n            console.log('Coins updated successfully');\n          } else {\n            console.error('Failed to update coins:', updateCoinsResult.message);\n          }\n        }\n\n        console.log('Score updated successfully');\n\n        // Redirect to the start page\n        // navigate('/levels'); // Replace '/start' with the actual route of your start page\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const calculateScore = () => {\n    // Implement the logic to calculate the score based on game performance\n    // You might consider factors like time taken, hints used, etc.\n    // For simplicity, let's assume a basic score for now.\n    return gameDuration - timer;\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds\n      .toString()\n      .padStart(2, '0')}`;\n    return formattedTime;\n  };\n\n  return (\n    <div className=\"game-main\">\n      {showGiveUpPopup && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Press Play Again to Retry</p>\n            <button onClick={handleRetry}>Retry</button>\n          </div>\n        </div>\n      )}\n\n      {gameCompleted && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>{`Congratulations! You finished the game in ${formatTime(timer)}`}</p>\n            <button onClick={handleGameCompletion}>Save Score</button>\n            <button onClick={() => alert('Redirecting to Levels')}>Go to Levels Page</button>\n          </div>\n        </div>\n      )}\n\n<div className=\"game-buttons\">\n        <button onClick={useHint} disabled={hintUsed}>\n          HINT\n        </button>\n        {insufficientCoins && (\n          <div className=\"insufficient-coins-message\">\n            Insufficient coins. Earn more to use hints.\n          </div>\n        )}\n        <div className=\"timer-container\">{formatTime(timer)}</div>\n        <button onClick={() => setShowGiveUpPopup(true)}>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        <div className='card-container-80'>\n        {cards.map((card, index) => (\n          <div\n            key={card.id}\n            className={`card1 ${card.flipped ? 'flipped' : ''} ${\n              card.matched ? 'matched' : ''\n            }`}\n            onClick={() => handleCardClick(index)}\n          >\n            {card.flipped && (\n              <>\n                {renderCornerSymbol(card.type)}\n                <img src={card.img} alt=\"Icon\" />\n              </>\n            )}\n          </div>\n        ))}\n        </div>\n      </div>\n      {gameOver && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Time has expired, you lost!</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst renderCornerSymbol = (type) => {\n  return (\n    <div className=\"symbol\">\n      <div className=\"top-left\">\n        <div className=\"text\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n      <div className=\"bottom-right\">\n        <div className=\"text2\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}