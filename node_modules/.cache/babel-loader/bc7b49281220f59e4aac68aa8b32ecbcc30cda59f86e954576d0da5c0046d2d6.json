{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cardTypes = [{\n  id: 1,\n  img: hearts,\n  text: 'A',\n  sideImg: heart164,\n  customText: 'A'\n}, {\n  id: 2,\n  img: spade,\n  text: 'A',\n  sideImg: spade,\n  customText: 'A'\n}, {\n  id: 3,\n  img: diamond,\n  text: 'A',\n  sideImg: diamondSide,\n  customText: 'A'\n}, {\n  id: 4,\n  img: Clubs,\n  text: 'A',\n  sideImg: Clubs,\n  customText: 'A'\n}];\nconst Game = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n  const [selectedNonSpadeCount, setSelectedNonSpadeCount] = useState(0);\n  useEffect(() => {\n    resetGame();\n  }, []); // Initial setup\n\n  useEffect(() => {\n    if (correctMatches === cardTypes.length * 2) {\n      setIsGameFinished(true);\n      // Handle game completion (e.g., show a message or perform any other action)\n    }\n  }, [correctMatches]);\n  const resetGame = () => {\n    const initialCards = [];\n    const totalPairs = cardTypes.length * 3; // Ensure we have 3 pairs (6 cards) of identical cards\n\n    for (let i = 0; i < totalPairs; i++) {\n      const type = cardTypes[i % cardTypes.length];\n\n      // Create two cards for each type in a pair\n      initialCards.push({\n        ...type,\n        id: i * 2 + 1,\n        isFlipped: false,\n        matched: false\n      });\n      initialCards.push({\n        ...type,\n        id: i * 2 + 2,\n        isFlipped: false,\n        matched: false\n      });\n    }\n    setCards(shuffleArray(initialCards));\n    setIsGameFinished(false);\n    setCorrectMatches(0);\n    setSelectedCards([]);\n    setIncorrectAttempts(0);\n    setSelectedNonSpadeCount(0);\n  };\n  const shuffleArray = array => {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  };\n  const handleCardClick = id => {\n    if (isGameFinished || selectedCards.length >= 3) {\n      // Game is already finished or 3 cards are already selected, do nothing\n      return;\n    }\n\n    // Find the clicked card\n    const clickedCard = cards.find(card => card.id === id);\n\n    // Check if the clicked card is already flipped or matched\n    if (clickedCard.isFlipped || clickedCard.matched) {\n      // If the card is already flipped or matched, do nothing\n      return;\n    }\n\n    // Flip the clicked card\n    setCards(prevCards => prevCards.map(card => card.id === id ? {\n      ...card,\n      isFlipped: true\n    } : card));\n\n    // Add the clicked card to the selected cards\n    setSelectedCards(prevSelected => [...prevSelected, id]);\n\n    // Check if three cards are selected\n    if (selectedCards.length === 2) {\n      const selectedCardTypes = selectedCards.map(cardId => {\n        const selectedCard = cards.find(card => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // Check if all selected cards are spades\n      const areAllSpades = selectedCardTypes.every(type => type === 'A');\n      if (!areAllSpades) {\n        setSelectedNonSpadeCount(prevCount => prevCount + 1);\n      }\n\n      // If the selected cards are not all spades, increase incorrect attempts\n      if (areAllSpades) {\n        setIncorrectAttempts(prevAttempts => prevAttempts + 1);\n        // Check if two consecutive incorrect attempts have been made\n        if (incorrectAttempts + 1 >= 2) {\n          setTimeout(() => {\n            setCards(prevCards => prevCards.map(card => selectedCards.includes(card.id) ? {\n              ...card,\n              isFlipped: false\n            } : card));\n            setSelectedCards([]); // Reset selected cards after flipping back\n            setIncorrectAttempts(0); // Reset incorrect attempts after flipping back\n          }, 1000); // Delay for a moment before flipping back\n        }\n      } else {\n        // Reset selected cards, incorrect attempts, and selected non-spade count on a correct match\n        setCards(prevCards => prevCards.map(card => selectedCards.includes(card.id) ? {\n          ...card,\n          matched: true\n        } : card));\n        setCorrectMatches(prevMatches => prevMatches + 2); // Increase by 2 for each correct match\n        setSelectedCards([]);\n        setIncorrectAttempts(0);\n        setSelectedNonSpadeCount(0);\n      }\n    }\n  };\n  const handleGiveUp = () => {\n    // Reset the game when the user gives up\n    resetGame();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: \"02:69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGiveUp,\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.isFlipped ? 'flipped' : ''}`,\n        onClick: () => handleCardClick(card.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.text, /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.sideImg,\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : '?'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n            src: card.isFlipped ? card.img : '',\n            alt: card.alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''} ${card.id === 4 ? 'top-left-rotate' : card.id === 5 ? 'top-left-rotate' : card.id === 6 ? 'top-left-rotate' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.id === 4 || card.id === 5 || card.id === 6 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"special-text\",\n              children: card.customText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, this) : card.customText, /*#__PURE__*/_jsxDEV(\"img\", {\n              className: `bottom-right-image ${card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''}`,\n              src: card.isFlipped ? card.sideImg : '',\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-container ${!card.isFlipped ? 'no-border' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"AUU8+Be10HtpuXWW6ciHj8kRmoY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","heart164","spade","diamond","diamondSide","Clubs","jsxDEV","_jsxDEV","Fragment","_Fragment","cardTypes","id","img","text","sideImg","customText","Game","_s","cards","setCards","isGameFinished","setIsGameFinished","correctMatches","setCorrectMatches","selectedCards","setSelectedCards","incorrectAttempts","setIncorrectAttempts","selectedNonSpadeCount","setSelectedNonSpadeCount","resetGame","length","initialCards","totalPairs","i","type","push","isFlipped","matched","shuffleArray","array","shuffledArray","slice","j","Math","floor","random","handleCardClick","clickedCard","find","card","prevCards","map","prevSelected","selectedCardTypes","cardId","selectedCard","areAllSpades","every","prevCount","prevAttempts","setTimeout","includes","prevMatches","handleGiveUp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst cardTypes = [\n  { id: 1, img: hearts, text: 'A', sideImg: heart164, customText: 'A' },\n  { id: 2, img: spade, text: 'A', sideImg: spade, customText: 'A' },\n  { id: 3, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A' },\n  { id: 4, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A' },\n];\n\nconst Game = () => {\n  const [cards, setCards] = useState([]);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n  const [selectedNonSpadeCount, setSelectedNonSpadeCount] = useState(0);\n\n  useEffect(() => {\n    resetGame();\n  }, []); // Initial setup\n\n  useEffect(() => {\n    if (correctMatches === cardTypes.length * 2) {\n      setIsGameFinished(true);\n      // Handle game completion (e.g., show a message or perform any other action)\n    }\n  }, [correctMatches]);\n\n  const resetGame = () => {\n    const initialCards = [];\n    const totalPairs = cardTypes.length * 3; // Ensure we have 3 pairs (6 cards) of identical cards\n\n    for (let i = 0; i < totalPairs; i++) {\n      const type = cardTypes[i % cardTypes.length];\n\n      // Create two cards for each type in a pair\n      initialCards.push({\n        ...type,\n        id: i * 2 + 1,\n        isFlipped: false,\n        matched: false,\n      });\n\n      initialCards.push({\n        ...type,\n        id: i * 2 + 2,\n        isFlipped: false,\n        matched: false,\n      });\n    }\n\n    setCards(shuffleArray(initialCards));\n    setIsGameFinished(false);\n    setCorrectMatches(0);\n    setSelectedCards([]);\n    setIncorrectAttempts(0);\n    setSelectedNonSpadeCount(0);\n  };\n\n  const shuffleArray = (array) => {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  };\n\n  const handleCardClick = (id) => {\n    if (isGameFinished || selectedCards.length >= 3) {\n      // Game is already finished or 3 cards are already selected, do nothing\n      return;\n    }\n\n    // Find the clicked card\n    const clickedCard = cards.find((card) => card.id === id);\n\n    // Check if the clicked card is already flipped or matched\n    if (clickedCard.isFlipped || clickedCard.matched) {\n      // If the card is already flipped or matched, do nothing\n      return;\n    }\n\n    // Flip the clicked card\n    setCards((prevCards) =>\n      prevCards.map((card) => (card.id === id ? { ...card, isFlipped: true } : card))\n    );\n\n    // Add the clicked card to the selected cards\n    setSelectedCards((prevSelected) => [...prevSelected, id]);\n\n    // Check if three cards are selected\n    if (selectedCards.length === 2) {\n      const selectedCardTypes = selectedCards.map((cardId) => {\n        const selectedCard = cards.find((card) => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // Check if all selected cards are spades\n      const areAllSpades = selectedCardTypes.every((type) => type === 'A');\n\n      if (!areAllSpades) {\n        setSelectedNonSpadeCount((prevCount) => prevCount + 1);\n      }\n\n      // If the selected cards are not all spades, increase incorrect attempts\n      if (areAllSpades) {\n        setIncorrectAttempts((prevAttempts) => prevAttempts + 1);\n        // Check if two consecutive incorrect attempts have been made\n        if (incorrectAttempts + 1 >= 2) {\n          setTimeout(() => {\n            setCards((prevCards) =>\n              prevCards.map((card) =>\n                selectedCards.includes(card.id) ? { ...card, isFlipped: false } : card\n              )\n            );\n            setSelectedCards([]); // Reset selected cards after flipping back\n            setIncorrectAttempts(0); // Reset incorrect attempts after flipping back\n          }, 1000); // Delay for a moment before flipping back\n        }\n      } else {\n        // Reset selected cards, incorrect attempts, and selected non-spade count on a correct match\n        setCards((prevCards) =>\n          prevCards.map((card) =>\n            selectedCards.includes(card.id) ? { ...card, matched: true } : card\n          )\n        );\n        setCorrectMatches((prevMatches) => prevMatches + 2); // Increase by 2 for each correct match\n        setSelectedCards([]);\n        setIncorrectAttempts(0);\n        setSelectedNonSpadeCount(0);\n      }\n    }\n  };\n\n  const handleGiveUp = () => {\n    // Reset the game when the user gives up\n    resetGame();\n  };\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button>HINT</button>\n        <div className=\"timer-container\">02:69</div>\n        <button onClick={handleGiveUp}>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card) => (\n          <div\n            className={`card1 ${card.isFlipped ? 'flipped' : ''}`}\n            key={card.id}\n            onClick={() => handleCardClick(card.id)}\n          >\n            <div\n              className={`card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.text}\n                  <img src={card.sideImg} alt={card.alt} />\n                </>\n              ) : (\n                '?'\n              )}\n            </div>\n            <div className={`heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`}>\n              <img\n                className={`hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`}\n                src={card.isFlipped ? card.img : ''}\n                alt={card.alt}\n              />\n            </div>\n            <div\n              className={`card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''\n              } ${\n                card.id === 4\n                  ? 'top-left-rotate'\n                  : card.id === 5\n                  ? 'top-left-rotate'\n                  : card.id === 6\n                  ? 'top-left-rotate'\n                  : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.id === 4 || card.id === 5 || card.id === 6 ? (\n                    <p className=\"special-text\">{card.customText}</p>\n                  ) : (\n                    card.customText\n                  )}\n                  <img\n                    className={`bottom-right-image ${\n                      card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''\n                    }`}\n                    src={card.isFlipped ? card.sideImg : ''}\n                    alt={card.alt}\n                  />\n                </>\n              ) : null}\n            </div>\n            {/* Add condition to apply border class only when not flipped */}\n            <div className={`border-container ${!card.isFlipped ? 'no-border' : ''}`}>\n              {/* Your border content here */}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}