{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/windows-game/src/Leaderboards.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/leaderboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Leaderboard = () => {\n  _s();\n  const [leaderboardData, setLeaderboardData] = useState([]);\n  const [filteredLeaderboardData, setFilteredLeaderboardData] = useState([]);\n  const [selectedLevel, setSelectedLevel] = useState(''); // State to store selected level\n  const itemsPerPage = 5;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true); // State to track loading state\n  const [error, setError] = useState(null); // State to track error\n\n  useEffect(() => {\n    const fetchLeaderboardData = async () => {\n      try {\n        setLoading(true); // Set loading state to true before fetching data\n\n        // Replace the URL with the actual URL of your PHP script\n        let url = 'http://localhost:8888/game/getLeaderboardData.php';\n\n        // Append selected level to URL if it's not empty\n        if (selectedLevel !== '') {\n          url += `?level=${selectedLevel}`;\n        }\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          mode: 'cors'\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        if (result.success) {\n          // Sort the leaderboard data by score in descending order\n          const sortedData = result.data.sort((a, b) => b.score - a.score);\n          setLeaderboardData(sortedData);\n          setFilteredLeaderboardData(sortedData);\n        } else {\n          throw new Error('Failed to fetch leaderboard data:', result.message);\n        }\n      } catch (error) {\n        setError(error.message); // Set error state if an error occurs\n      } finally {\n        setLoading(false); // Set loading state to false after fetching data\n      }\n    };\n    fetchLeaderboardData();\n  }, [selectedLevel]); // Fetch leaderboard data whenever selected level changes\n\n  // Function to filter leaderboard data by selected level\n  const filterLeaderboardByLevel = level => {\n    setSelectedLevel(level);\n    setCurrentPage(1); // Reset current page to 1 when filtering\n  };\n\n  // Render loading spinner if loading state is true\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render error message if error state is not null\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render no data message if filtered leaderboard data is empty\n  if (filteredLeaderboardData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No Data Found In Database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  }\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentLeaderboardData = filteredLeaderboardData.slice(startIndex, endIndex);\n  const totalPages = Math.ceil(filteredLeaderboardData.length / itemsPerPage);\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n\n  // Function to get rank icon based on rank\n  const getRankIcon = rank => {\n    if (rank === 1) {\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-trophy fa-2x trophy-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 14\n      }, this); // Trophy icon for rank 1\n    } else if (rank === 2) {\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-trophy fa-2x silver-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }, this); // Medal icon for rank 2\n    } else if (rank === 3) {\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-trophy fa-2x bronze-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 14\n      }, this); // Award icon for rank 3\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-trophy fa-2x default-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }, this); // Default icon for other ranks\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaderboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Leaderboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => filterLeaderboardByLevel(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Levels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 3\n        }, this), Array.from({\n          length: 20\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: i + 1,\n          children: [\"Level \", i + 1]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 5\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rank-container\",\n        children: currentLeaderboardData.map((entry, localIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rank-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rank\",\n            children: [getRankIcon(startIndex + localIndex + 1), \" \", startIndex + localIndex + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"username\",\n            children: entry.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"score\",\n            children: entry.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, localIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(currentPage - 1),\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(currentPage + 1),\n          disabled: currentPage === totalPages,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Leaderboard, \"oGNdYsol46txPt6rz5Sa25RzkNw=\");\n_c = Leaderboard;\nexport default Leaderboard;\nvar _c;\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Leaderboard","_s","leaderboardData","setLeaderboardData","filteredLeaderboardData","setFilteredLeaderboardData","selectedLevel","setSelectedLevel","itemsPerPage","currentPage","setCurrentPage","loading","setLoading","error","setError","fetchLeaderboardData","url","response","fetch","method","headers","credentials","mode","ok","Error","status","result","json","success","sortedData","data","sort","a","b","score","message","filterLeaderboardByLevel","level","children","fileName","_jsxFileName","lineNumber","columnNumber","length","startIndex","endIndex","currentLeaderboardData","slice","totalPages","Math","ceil","handlePageChange","page","getRankIcon","rank","className","onChange","e","target","value","Array","from","_","i","map","entry","localIndex","username","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/windows-game/src/Leaderboards.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/leaderboard.css';\n\nconst Leaderboard = () => {\n  const [leaderboardData, setLeaderboardData] = useState([]);\n  const [filteredLeaderboardData, setFilteredLeaderboardData] = useState([]);\n  const [selectedLevel, setSelectedLevel] = useState(''); // State to store selected level\n  const itemsPerPage = 5;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true); // State to track loading state\n  const [error, setError] = useState(null); // State to track error\n\n  useEffect(() => {\n    const fetchLeaderboardData = async () => {\n      try {\n        setLoading(true); // Set loading state to true before fetching data\n\n        // Replace the URL with the actual URL of your PHP script\n        let url = 'http://localhost:8888/game/getLeaderboardData.php';\n\n        // Append selected level to URL if it's not empty\n        if (selectedLevel !== '') {\n          url += `?level=${selectedLevel}`;\n        }\n\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n          mode: 'cors',\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const result = await response.json();\n\n        if (result.success) {\n          // Sort the leaderboard data by score in descending order\n          const sortedData = result.data.sort((a, b) => b.score - a.score);\n          setLeaderboardData(sortedData);\n          setFilteredLeaderboardData(sortedData);\n        } else {\n          throw new Error('Failed to fetch leaderboard data:', result.message);\n        }\n      } catch (error) {\n        setError(error.message); // Set error state if an error occurs\n      } finally {\n        setLoading(false); // Set loading state to false after fetching data\n      }\n    };\n\n    fetchLeaderboardData();\n  }, [selectedLevel]); // Fetch leaderboard data whenever selected level changes\n\n  // Function to filter leaderboard data by selected level\n  const filterLeaderboardByLevel = (level) => {\n    setSelectedLevel(level);\n    setCurrentPage(1); // Reset current page to 1 when filtering\n  };\n\n  // Render loading spinner if loading state is true\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // Render error message if error state is not null\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  // Render no data message if filtered leaderboard data is empty\n  if (filteredLeaderboardData.length === 0) {\n    return <div>No Data Found In Database</div>;\n  }\n\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentLeaderboardData = filteredLeaderboardData.slice(startIndex, endIndex);\n\n  const totalPages = Math.ceil(filteredLeaderboardData.length / itemsPerPage);\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  // Function to get rank icon based on rank\n  const getRankIcon = (rank) => {\n    if (rank === 1) {\n      return <i className=\"fa fa-trophy fa-2x trophy-icon\"></i>; // Trophy icon for rank 1\n    } else if (rank === 2) {\n      return <i className=\"fa fa-trophy fa-2x silver-icon\"></i>; // Medal icon for rank 2\n    } else if (rank === 3) {\n      return <i className=\"fa fa-trophy fa-2x bronze-icon\"></i>; // Award icon for rank 3\n    } else {\n      return <i className=\"fa fa-trophy fa-2x default-icon\"></i>; // Default icon for other ranks\n    }\n  };\n\n  return (\n    <div className='leaderboard-container'>\n      <div className=\"leaderboard-main\">\n        <h2>Leaderboard</h2>\n        {/* Dropdown menu to select level for filtering */}\n        <select onChange={(e) => filterLeaderboardByLevel(e.target.value)}>\n  <option value=\"\">All Levels</option>\n  {Array.from({ length: 20 }, (_, i) => (\n    <option key={i} value={i + 1}>Level {i + 1}</option>\n  ))}\n</select>\n        <div className='rank-container'>\n          {currentLeaderboardData.map((entry, localIndex) => (\n            <div key={localIndex} className='rank-item'>\n              <div className='rank'>\n                {getRankIcon(startIndex + localIndex + 1)} {startIndex + localIndex + 1}\n              </div>\n              <div className='username'>{entry.username}</div>\n              <div className='score'>{entry.score}</div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"pagination\">\n          <button\n            onClick={() => handlePageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n          >\n            Previous\n          </button>\n          <span>{currentPage}</span>\n          <button\n            onClick={() => handlePageChange(currentPage + 1)}\n            disabled={currentPage === totalPages}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}