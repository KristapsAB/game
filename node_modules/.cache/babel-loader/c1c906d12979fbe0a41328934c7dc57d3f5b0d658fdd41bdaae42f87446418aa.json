{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const symbols = [heart164, spade, diamondSide, Clubs];\n  const generateRandomCards = () => {\n    const initialCards = symbols.map(symbol => [{\n      id: Math.random(),\n      img: symbol\n    }, {\n      id: Math.random(),\n      img: symbol\n    }, {\n      id: Math.random(),\n      img: symbol\n    }]).flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [firstFlipped, setFirstFlipped] = useState(null);\n  const [secondFlipped, setSecondFlipped] = useState(null);\n  useEffect(() => {\n    if (flippedCount === 2) {\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount]);\n  const handleCardClick = index => {\n    if (flippedCount < 2) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      if (flippedCount === 0) {\n        setFirstFlipped(index);\n      } else {\n        setSecondFlipped(index);\n      }\n    }\n  };\n  const checkForMatch = () => {\n    if (firstFlipped !== null && secondFlipped !== null && cards[firstFlipped].img === cards[secondFlipped].img) {\n      setCards(prevCards => prevCards.map((card, i) => i === firstFlipped || i === secondFlipped ? {\n        ...card,\n        flipped: true\n      } : card));\n    } else {\n      setCards(prevCards => prevCards.map((card, i) => i === firstFlipped || i === secondFlipped ? {\n        ...card,\n        flipped: false\n      } : card));\n    }\n    setFlippedCount(0);\n    setFirstFlipped(null);\n    setSecondFlipped(null);\n  };\n  const checkForWin = () => {\n    if (cards.every(card => card.flipped)) {\n      alert('Congratulations! You found all matching symbols.');\n      // You can reset the game or perform other actions upon winning\n    }\n  };\n  useEffect(() => {\n    checkForWin();\n  }, [cards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: \"02:69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.flipped ? 'flipped' : ''}`,\n        onClick: () => handleCardClick(index),\n        children: card.flipped && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.img,\n          alt: \"Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"y/Lb4RhntPAwW3Gr6eNLAnaO3XE=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","heart164","spade","diamond","diamondSide","Clubs","jsxDEV","_jsxDEV","Game","_s","symbols","generateRandomCards","initialCards","map","symbol","id","Math","random","img","flat","sort","cards","setCards","flippedCount","setFlippedCount","firstFlipped","setFirstFlipped","secondFlipped","setSecondFlipped","setTimeout","checkForMatch","handleCardClick","index","prevCards","card","i","flipped","prevCount","checkForWin","every","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst Game = () => {\n  const symbols = [heart164, spade, diamondSide, Clubs];\n\n  const generateRandomCards = () => {\n    const initialCards = symbols\n      .map((symbol) => [\n        { id: Math.random(), img: symbol },\n        { id: Math.random(), img: symbol },\n        { id: Math.random(), img: symbol },\n      ])\n      .flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [firstFlipped, setFirstFlipped] = useState(null);\n  const [secondFlipped, setSecondFlipped] = useState(null);\n\n  useEffect(() => {\n    if (flippedCount === 2) {\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount]);\n\n  const handleCardClick = (index) => {\n    if (flippedCount < 2) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n\n      if (flippedCount === 0) {\n        setFirstFlipped(index);\n      } else {\n        setSecondFlipped(index);\n      }\n    }\n  };\n\n  const checkForMatch = () => {\n    if (\n      firstFlipped !== null &&\n      secondFlipped !== null &&\n      cards[firstFlipped].img === cards[secondFlipped].img\n    ) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === firstFlipped || i === secondFlipped\n            ? { ...card, flipped: true }\n            : card\n        )\n      );\n    } else {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === firstFlipped || i === secondFlipped\n            ? { ...card, flipped: false }\n            : card\n        )\n      );\n    }\n\n    setFlippedCount(0);\n    setFirstFlipped(null);\n    setSecondFlipped(null);\n  };\n\n  const checkForWin = () => {\n    if (cards.every((card) => card.flipped)) {\n      alert('Congratulations! You found all matching symbols.');\n      // You can reset the game or perform other actions upon winning\n    }\n  };\n\n  useEffect(() => {\n    checkForWin();\n  }, [cards]);\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button>HINT</button>\n        <div className=\"timer-container\">02:69</div>\n        <button>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card, index) => (\n          <div\n            key={card.id}\n            className={`card1 ${card.flipped ? 'flipped' : ''}`}\n            onClick={() => handleCardClick(index)}\n          >\n            {card.flipped && (\n              <img src={card.img} alt=\"Icon\" />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}