{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game 2/guess/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/profile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  // Fetch user ID from sessionStorage\n  const userId = sessionStorage.getItem('userId');\n\n  // State to store user data\n  const [userData, setUserData] = useState(null);\n\n  // State to manage edited data and validation errors\n  const [editedData, setEditedData] = useState({\n    username: result.userData.username,\n    email: result.userData.email,\n    password: '' // Do not include the password initially\n  });\n\n  // State for validation errors\n  const [validationErrors, setValidationErrors] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n\n  // State for success message\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // State for duplicate user error\n  const [duplicateUserError, setDuplicateUserError] = useState('');\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8888/game/getUserProfile.php?id=${userId}`, {\n          method: 'GET',\n          credentials: 'omit'\n        });\n        if (!response.ok) {\n          console.error(`HTTP error! Status: ${response.status}`);\n          console.log('Response text:', await response.text());\n          return;\n        }\n        const resultText = await response.text();\n        console.log('Raw result text:', resultText);\n        try {\n          const result = JSON.parse(resultText);\n          if (result.success) {\n            setUserData(result.userData);\n            setEditedData({\n              username: result.userData.username,\n              email: result.userData.email,\n              password: result.userData.password // Include the password\n            });\n          } else {\n            console.error('Failed to fetch user data:', result.message);\n          }\n        } catch (jsonError) {\n          console.error('Error parsing JSON:', jsonError);\n          console.log('Raw result text:', resultText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    if (userId) {\n      fetchUserData();\n    }\n  }, [userId]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditedData({\n      ...editedData,\n      [name]: value\n    });\n\n    // Clear previous validation errors when the user starts typing\n    setValidationErrors({\n      ...validationErrors,\n      [name]: ''\n    });\n\n    // Clear success message when the user starts typing\n    setSuccessMessage('');\n\n    // Clear duplicate user error when the user starts typing\n    setDuplicateUserError('');\n  };\n  const validateInputs = () => {\n    let valid = true;\n    const errors = {};\n\n    // Check for empty fields\n    if (!editedData.username.trim()) {\n      valid = false;\n      errors.username = 'Username cannot be empty';\n    }\n    if (!editedData.email.trim()) {\n      valid = false;\n      errors.email = 'Email cannot be empty';\n    }\n    if (!editedData.password.trim()) {\n      valid = false;\n      errors.password = 'Password cannot be empty';\n    }\n\n    // Check for @ symbol in email\n    if (!editedData.email.includes('@')) {\n      valid = false;\n      errors.email = 'Invalid email format';\n    }\n\n    // Check minimum password length\n    if (editedData.password.length < 7) {\n      valid = false;\n      errors.password = 'Password must be at least 7 characters';\n    }\n\n    // Check for special characters in username\n    if (!/^[a-zA-Z]+$/.test(editedData.username)) {\n      valid = false;\n      errors.username = 'Username can only contain Latin alphabet characters';\n    }\n    setValidationErrors(errors);\n    return valid;\n  };\n  const handleSave = async () => {\n    try {\n      // Validate inputs before making the request\n      if (!validateInputs()) {\n        console.error('Validation failed. Please check the form for errors.');\n        return;\n      }\n      const requestData = {\n        username: editedData.username,\n        email: editedData.email,\n        // Only include the password field if it's changed\n        ...(editedData.password && {\n          password: editedData.password\n        })\n      };\n      const response = await fetch(`http://localhost:8888/game/updateUserProfile.php?id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'omit',\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n      const resultText = await response.text();\n      console.log('Raw result text:', resultText);\n      const result = JSON.parse(resultText);\n      if (result.success) {\n        setUserData(result.userData);\n        setSuccessMessage('Profile data updated successfully');\n        console.log('User data updated successfully');\n      } else {\n        if (result.errorCode === 'DUPLICATE_USER') {\n          setDuplicateUserError(result.message);\n        } else {\n          console.error('Failed to update user data:', result.message);\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        value: editedData.username,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: validationErrors.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        value: editedData.email,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: validationErrors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: editedData.password,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: validationErrors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), duplicateUserError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: duplicateUserError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 32\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"zI/ZveiPy4ed5nikCRlPcDVFBuQ=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Profile","_s","userId","sessionStorage","getItem","userData","setUserData","editedData","setEditedData","username","result","email","password","validationErrors","setValidationErrors","successMessage","setSuccessMessage","duplicateUserError","setDuplicateUserError","fetchUserData","response","fetch","method","credentials","ok","console","error","status","log","text","resultText","JSON","parse","success","message","jsonError","handleInputChange","e","name","value","target","validateInputs","valid","errors","trim","includes","length","test","handleSave","requestData","headers","body","stringify","errorCode","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game 2/guess/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/profile.css';\n\nconst Profile = () => {\n  // Fetch user ID from sessionStorage\n  const userId = sessionStorage.getItem('userId');\n\n  // State to store user data\n  const [userData, setUserData] = useState(null);\n\n  // State to manage edited data and validation errors\n  const [editedData, setEditedData] = useState({\n    username: result.userData.username,\n    email: result.userData.email,\n    password: '', // Do not include the password initially\n  });\n\n  // State for validation errors\n  const [validationErrors, setValidationErrors] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n\n  // State for success message\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // State for duplicate user error\n  const [duplicateUserError, setDuplicateUserError] = useState('');\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8888/game/getUserProfile.php?id=${userId}`, {\n          method: 'GET',\n          credentials: 'omit',\n        });\n\n        if (!response.ok) {\n          console.error(`HTTP error! Status: ${response.status}`);\n          console.log('Response text:', await response.text());\n          return;\n        }\n\n        const resultText = await response.text();\n        console.log('Raw result text:', resultText);\n\n        try {\n          const result = JSON.parse(resultText);\n          if (result.success) {\n            setUserData(result.userData);\n            setEditedData({\n              username: result.userData.username,\n              email: result.userData.email,\n              password: result.userData.password, // Include the password\n            });\n          } else {\n            console.error('Failed to fetch user data:', result.message);\n          }\n        } catch (jsonError) {\n          console.error('Error parsing JSON:', jsonError);\n          console.log('Raw result text:', resultText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n\n    if (userId) {\n      fetchUserData();\n    }\n  }, [userId]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setEditedData({\n      ...editedData,\n      [name]: value,\n    });\n\n    // Clear previous validation errors when the user starts typing\n    setValidationErrors({\n      ...validationErrors,\n      [name]: '',\n    });\n\n    // Clear success message when the user starts typing\n    setSuccessMessage('');\n\n    // Clear duplicate user error when the user starts typing\n    setDuplicateUserError('');\n  };\n\n  const validateInputs = () => {\n    let valid = true;\n    const errors = {};\n\n    // Check for empty fields\n    if (!editedData.username.trim()) {\n      valid = false;\n      errors.username = 'Username cannot be empty';\n    }\n\n    if (!editedData.email.trim()) {\n      valid = false;\n      errors.email = 'Email cannot be empty';\n    }\n\n    if (!editedData.password.trim()) {\n      valid = false;\n      errors.password = 'Password cannot be empty';\n    }\n\n    // Check for @ symbol in email\n    if (!editedData.email.includes('@')) {\n      valid = false;\n      errors.email = 'Invalid email format';\n    }\n\n    // Check minimum password length\n    if (editedData.password.length < 7) {\n      valid = false;\n      errors.password = 'Password must be at least 7 characters';\n    }\n\n    // Check for special characters in username\n    if (!/^[a-zA-Z]+$/.test(editedData.username)) {\n      valid = false;\n      errors.username = 'Username can only contain Latin alphabet characters';\n    }\n\n    setValidationErrors(errors);\n\n    return valid;\n  };\n\n  const handleSave = async () => {\n    try {\n      // Validate inputs before making the request\n      if (!validateInputs()) {\n        console.error('Validation failed. Please check the form for errors.');\n        return;\n      }\n  \n      const requestData = {\n        username: editedData.username,\n        email: editedData.email,\n        // Only include the password field if it's changed\n        ...(editedData.password && { password: editedData.password }),\n      };\n  \n      const response = await fetch(`http://localhost:8888/game/updateUserProfile.php?id=${userId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'omit',\n        body: JSON.stringify(requestData),\n      });\n  \n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n  \n      const resultText = await response.text();\n      console.log('Raw result text:', resultText);\n  \n      const result = JSON.parse(resultText);\n  \n      if (result.success) {\n        setUserData(result.userData);\n        setSuccessMessage('Profile data updated successfully');\n        console.log('User data updated successfully');\n      } else {\n        if (result.errorCode === 'DUPLICATE_USER') {\n          setDuplicateUserError(result.message);\n        } else {\n          console.error('Failed to update user data:', result.message);\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  \n\n  if (!userData) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-main\">\n        <label>Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={editedData.username}\n          onChange={handleInputChange}\n        />\n        <div className=\"error-message\">{validationErrors.username}</div>\n\n        <label>Email</label>\n        <input type=\"text\" name=\"email\" value={editedData.email} onChange={handleInputChange} />\n        <div className=\"error-message\">{validationErrors.email}</div>\n\n        <label>Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={editedData.password}\n          onChange={handleInputChange}\n        />\n        <div className=\"error-message\">{validationErrors.password}</div>\n\n        {duplicateUserError && <div className=\"error-message\">{duplicateUserError}</div>}\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\n\n        <button onClick={handleSave}>Save</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}