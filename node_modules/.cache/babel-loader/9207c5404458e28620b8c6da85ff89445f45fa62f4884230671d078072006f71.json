{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [cards, setCards] = useState([{\n    id: 1,\n    img: hearts,\n    text: 'A',\n    sideImg: heart164,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 2,\n    img: hearts,\n    text: 'A',\n    sideImg: heart164,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 3,\n    img: hearts,\n    text: 'A',\n    sideImg: heart164,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 4,\n    img: spade,\n    text: 'A',\n    sideImg: spade,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 5,\n    img: spade,\n    text: 'A',\n    sideImg: spade,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 6,\n    img: spade,\n    text: 'A',\n    sideImg: spade,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 7,\n    img: diamond,\n    text: 'A',\n    sideImg: diamondSide,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 8,\n    img: diamond,\n    text: 'A',\n    sideImg: diamondSide,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 9,\n    img: diamond,\n    text: 'A',\n    sideImg: diamondSide,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 10,\n    img: Clubs,\n    text: 'A',\n    sideImg: Clubs,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 11,\n    img: Clubs,\n    text: 'A',\n    sideImg: Clubs,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }, {\n    id: 12,\n    img: Clubs,\n    text: 'A',\n    sideImg: Clubs,\n    customText: 'A',\n    isFlipped: false,\n    matched: false\n  }]);\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n  useEffect(() => {\n    setCards(cards => shuffleArray(cards));\n  }, []);\n  useEffect(() => {\n    if (correctMatches === 3) {\n      setIsGameFinished(true);\n      // Handle game completion (e.g., show a message or perform any other action)\n    }\n  }, [correctMatches]);\n  function shuffleArray(array) {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  }\n  const handleCardClick = id => {\n    if (isGameFinished || selectedCards.length >= 3) {\n      // Game is already finished or 3 cards are already selected, do nothing\n      return;\n    }\n\n    // Find the clicked card\n    const clickedCard = cards.find(card => card.id === id);\n\n    // Check if the clicked card is already flipped\n    if (clickedCard.isFlipped) {\n      // If the card is already flipped, do nothing\n      return;\n    }\n\n    // Flip the clicked card\n    setCards(prevCards => prevCards.map(card => card.id === id ? {\n      ...card,\n      isFlipped: true\n    } : card));\n\n    // Add the clicked card to the selected cards\n    setSelectedCards(prevSelected => [...prevSelected, id]);\n\n    // Check if three cards are selected\n    if (selectedCards.length === 2) {\n      // Change from 3 to 2\n      const selectedCardIds = [...selectedCards, id];\n      const selectedCardTypes = selectedCardIds.map(cardId => {\n        const selectedCard = cards.find(card => card.id === cardId);\n        return selectedCard.customText;\n      });\n\n      // If the selected cards are not identical, flip them back over\n      if (selectedCardTypes[0] !== selectedCardTypes[1] || selectedCardTypes[1] !== selectedCardTypes[2] || selectedCardTypes[0] !== selectedCardTypes[2]) {\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map(card => selectedCardIds.includes(card.id) ? {\n            ...card,\n            isFlipped: false\n          } : card));\n          setSelectedCards([]); // Reset selected cards after flipping back\n        }, 1000); // Delay for a moment before flipping back\n      } else {\n        // If the selected cards are identical, mark them as matched\n        setCards(prevCards => prevCards.map(card => selectedCardIds.includes(card.id) ? {\n          ...card,\n          matched: true\n        } : card));\n        setCorrectMatches(prevMatches => prevMatches + 1);\n\n        // Reset selected cards on a correct match\n        setSelectedCards([]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: \"02:69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.isFlipped ? 'flipped' : ''}`,\n        onClick: () => handleCardClick(card.id),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.text, /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.sideImg,\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : '?'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: `hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`,\n            src: card.isFlipped ? card.img : '',\n            alt: card.alt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''} ${card.id === 4 ? 'top-left-rotate' : card.id === 5 ? 'top-left-rotate' : card.id === 6 ? 'top-left-rotate' : ''}`,\n          children: card.isFlipped ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [card.id === 4 || card.id === 5 || card.id === 6 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"special-text\",\n              children: card.customText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this) : card.customText, /*#__PURE__*/_jsxDEV(\"img\", {\n              className: `bottom-right-image ${card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''}`,\n              src: card.isFlipped ? card.sideImg : '',\n              alt: card.alt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-container ${!card.isFlipped ? 'no-border' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"F8lAWfdugfWG/pmxuFIwLIZ3a0s=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","heart164","spade","diamond","diamondSide","Clubs","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","cards","setCards","id","img","text","sideImg","customText","isFlipped","matched","isGameFinished","setIsGameFinished","correctMatches","setCorrectMatches","selectedCards","setSelectedCards","incorrectAttempts","setIncorrectAttempts","shuffleArray","array","shuffledArray","slice","i","length","j","Math","floor","random","handleCardClick","clickedCard","find","card","prevCards","map","prevSelected","selectedCardIds","selectedCardTypes","cardId","selectedCard","setTimeout","includes","prevMatches","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamond from './image/diamond.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst Game = () => {\n  const [cards, setCards] = useState([\n    { id: 1, img: hearts, text: 'A', sideImg: heart164, customText: 'A', isFlipped: false, matched: false },\n    { id: 2, img: hearts, text: 'A', sideImg: heart164, customText: 'A', isFlipped: false, matched: false },\n    { id: 3, img: hearts, text: 'A', sideImg: heart164, customText: 'A', isFlipped: false, matched: false },\n    { id: 4, img: spade, text: 'A', sideImg: spade, customText: 'A', isFlipped: false, matched: false },\n    { id: 5, img: spade, text: 'A', sideImg: spade, customText: 'A', isFlipped: false, matched: false },\n    { id: 6, img: spade, text: 'A', sideImg: spade, customText: 'A', isFlipped: false, matched: false },\n    { id: 7, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A', isFlipped: false, matched: false },\n    { id: 8, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A', isFlipped: false, matched: false },\n    { id: 9, img: diamond, text: 'A', sideImg: diamondSide, customText: 'A', isFlipped: false, matched: false },\n    { id: 10, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A', isFlipped: false, matched: false },\n    { id: 11, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A', isFlipped: false, matched: false },\n    { id: 12, img: Clubs, text: 'A', sideImg: Clubs, customText: 'A', isFlipped: false, matched: false },\n  ]);\n\n  const [isGameFinished, setIsGameFinished] = useState(false);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [incorrectAttempts, setIncorrectAttempts] = useState(0);\n\n  useEffect(() => {\n    setCards((cards) => shuffleArray(cards));\n  }, []);\n\n  useEffect(() => {\n    if (correctMatches === 3) {\n      setIsGameFinished(true);\n      // Handle game completion (e.g., show a message or perform any other action)\n    }\n  }, [correctMatches]);\n\n  function shuffleArray(array) {\n    const shuffledArray = array.slice();\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray;\n  }\n\n  const handleCardClick = (id) => {\n    if (isGameFinished || selectedCards.length >= 3) {\n      // Game is already finished or 3 cards are already selected, do nothing\n      return;\n    }\n  \n    // Find the clicked card\n    const clickedCard = cards.find((card) => card.id === id);\n  \n    // Check if the clicked card is already flipped\n    if (clickedCard.isFlipped) {\n      // If the card is already flipped, do nothing\n      return;\n    }\n  \n    // Flip the clicked card\n    setCards((prevCards) =>\n      prevCards.map((card) =>\n        card.id === id ? { ...card, isFlipped: true } : card\n      )\n    );\n  \n    // Add the clicked card to the selected cards\n    setSelectedCards((prevSelected) => [...prevSelected, id]);\n  \n    // Check if three cards are selected\n    if (selectedCards.length === 2) { // Change from 3 to 2\n      const selectedCardIds = [...selectedCards, id];\n  \n      const selectedCardTypes = selectedCardIds.map((cardId) => {\n        const selectedCard = cards.find((card) => card.id === cardId);\n        return selectedCard.customText;\n      });\n  \n      // If the selected cards are not identical, flip them back over\n      if (\n        selectedCardTypes[0] !== selectedCardTypes[1] ||\n        selectedCardTypes[1] !== selectedCardTypes[2] ||\n        selectedCardTypes[0] !== selectedCardTypes[2]\n      ) {\n        setTimeout(() => {\n          setCards((prevCards) =>\n            prevCards.map((card) =>\n              selectedCardIds.includes(card.id) ? { ...card, isFlipped: false } : card\n            )\n          );\n          setSelectedCards([]); // Reset selected cards after flipping back\n        }, 1000); // Delay for a moment before flipping back\n      } else {\n        // If the selected cards are identical, mark them as matched\n        setCards((prevCards) =>\n          prevCards.map((card) =>\n            selectedCardIds.includes(card.id) ? { ...card, matched: true } : card\n          )\n        );\n        setCorrectMatches((prevMatches) => prevMatches + 1);\n  \n        // Reset selected cards on a correct match\n        setSelectedCards([]);\n      }\n    }\n  };\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button>HINT</button>\n        <div className=\"timer-container\">02:69</div>\n        <button>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card) => (\n          <div\n            className={`card1 ${card.isFlipped ? 'flipped' : ''}`}\n            key={card.id}\n            onClick={() => handleCardClick(card.id)}\n          >\n            <div\n              className={`card-text ${card.isFlipped ? 'card-text-second' : 'card-text-back'} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'spade-specific-styling' : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.text}\n                  <img src={card.sideImg} alt={card.alt} />\n                </>\n              ) : (\n                '?'\n              )}\n            </div>\n            <div className={`heart-icon ${card.isFlipped ? 'bottom-right-rotate' : ''}`}>\n              <img\n                className={`hearts ${card.isFlipped ? 'bottom-right-rotate' : ''}`}\n                src={card.isFlipped ? card.img : ''}\n                alt={card.alt}\n              />\n            </div>\n            <div\n              className={`card-text-first ${card.isFlipped ? 'rotate-text' : ''} ${\n                card.id === 4 || card.id === 5 || card.id === 6 ? 'special-text' : ''\n              } ${\n                card.id === 4\n                  ? 'top-left-rotate'\n                  : card.id === 5\n                  ? 'top-left-rotate'\n                  : card.id === 6\n                  ? 'top-left-rotate'\n                  : ''\n              }`}\n            >\n              {card.isFlipped ? (\n                <>\n                  {card.id === 4 || card.id === 5 || card.id === 6 ? (\n                    <p className=\"special-text\">{card.customText}</p>\n                  ) : (\n                    card.customText\n                  )}\n                  <img\n                    className={`bottom-right-image ${\n                      card.id === 4 || card.id === 5 || card.id === 6 ? 'bottom-right-custom' : ''\n                    }`}\n                    src={card.isFlipped ? card.sideImg : ''}\n                    alt={card.alt}\n                  />\n                </>\n              ) : null}\n            </div>\n            {/* Add condition to apply border class only when not flipped */}\n            <div className={`border-container ${!card.isFlipped ? 'no-border' : ''}`}>\n              {/* Your border content here */}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}