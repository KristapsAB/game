{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game 2/guess/src/BackgroundContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContext = /*#__PURE__*/createContext();\nexport const BackgroundProvider = ({\n  children\n}) => {\n  _s();\n  const storedBackground = localStorage.getItem('selectedBackground');\n  const [background, setBackground] = useState(storedBackground || 'wallpapers/default.jpg');\n  const [textColor, setTextColor] = useState('#000000'); // Default text color\n  const [inputStyle, setInputStyle] = useState({\n    border: '1px solid #000000'\n  }); // Default input style\n\n  const availableBackgrounds = ['wallpapers/wallpaper1.jpg', 'wallpapers/wallpaper2.jpg', 'wallpapers/wallpaper10.jpg'];\n  const changeBackground = newBackground => {\n    setBackground(newBackground);\n    localStorage.setItem('selectedBackground', newBackground);\n    // Add logic here to set textColor and inputStyle based on the selected background\n    // For example, you can check if newBackground is 'wallpapers/wallpaper1.jpg' and update accordingly\n    if (newBackground === 'wallpapers/wallpaper1.jpg') {\n      setTextColor('#FFFFFF'); // Set text color to white\n      setInputStyle({\n        border: '1px solid #FFFFFF'\n      }); // Set input border color to white\n    } else {\n      setTextColor('#000000'); // Reset text color\n      setInputStyle({\n        border: '1px solid #000000'\n      }); // Reset input border color\n    }\n  };\n  const applyBackgroundStyle = newBackground => {\n    document.body.style.backgroundImage = `url(${newBackground})`;\n    document.body.style.backgroundSize = 'cover';\n    document.body.style.backgroundPosition = 'center';\n    document.body.style.backgroundRepeat = 'no-repeat';\n  };\n\n  // Additional useEffect for dynamic body background update\n  useEffect(() => {\n    applyBackgroundStyle(background);\n  }, [background]);\n  return /*#__PURE__*/_jsxDEV(BackgroundContext.Provider, {\n    value: {\n      background,\n      availableBackgrounds,\n      changeBackground,\n      textColor,\n      inputStyle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(BackgroundProvider, \"1OzoaMzES861OyR4guu+fUtOvqk=\");\n_c = BackgroundProvider;\nexport const useBackground = () => {\n  _s2();\n  return useContext(BackgroundContext);\n};\n_s2(useBackground, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"BackgroundProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","BackgroundContext","BackgroundProvider","children","_s","storedBackground","localStorage","getItem","background","setBackground","textColor","setTextColor","inputStyle","setInputStyle","border","availableBackgrounds","changeBackground","newBackground","setItem","applyBackgroundStyle","document","body","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBackground","_s2","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game 2/guess/src/BackgroundContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst BackgroundContext = createContext();\n\nexport const BackgroundProvider = ({ children }) => {\n  const storedBackground = localStorage.getItem('selectedBackground');\n  const [background, setBackground] = useState(storedBackground || 'wallpapers/default.jpg');\n  const [textColor, setTextColor] = useState('#000000'); // Default text color\n  const [inputStyle, setInputStyle] = useState({ border: '1px solid #000000' }); // Default input style\n\n  const availableBackgrounds = [\n    'wallpapers/wallpaper1.jpg',\n    'wallpapers/wallpaper2.jpg',\n    'wallpapers/wallpaper10.jpg',\n  ];\n\n  const changeBackground = (newBackground) => {\n    setBackground(newBackground);\n    localStorage.setItem('selectedBackground', newBackground);\n    // Add logic here to set textColor and inputStyle based on the selected background\n    // For example, you can check if newBackground is 'wallpapers/wallpaper1.jpg' and update accordingly\n    if (newBackground === 'wallpapers/wallpaper1.jpg') {\n      setTextColor('#FFFFFF'); // Set text color to white\n      setInputStyle({ border: '1px solid #FFFFFF' }); // Set input border color to white\n    } else {\n      setTextColor('#000000'); // Reset text color\n      setInputStyle({ border: '1px solid #000000' }); // Reset input border color\n    }\n  };\n\n  const applyBackgroundStyle = (newBackground) => {\n    document.body.style.backgroundImage = `url(${newBackground})`;\n    document.body.style.backgroundSize = 'cover';\n    document.body.style.backgroundPosition = 'center';\n    document.body.style.backgroundRepeat = 'no-repeat';\n  };\n\n  // Additional useEffect for dynamic body background update\n  useEffect(() => {\n    applyBackgroundStyle(background);\n  }, [background]);\n\n  return (\n    <BackgroundContext.Provider value={{ background, availableBackgrounds, changeBackground, textColor, inputStyle }}>\n      {children}\n    </BackgroundContext.Provider>\n  );\n};\n\nexport const useBackground = () => {\n  return useContext(BackgroundContext);\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,iBAAiB,gBAAGN,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMO,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;EACnE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAACQ,gBAAgB,IAAI,wBAAwB,CAAC;EAC1F,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACvD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC;IAAEiB,MAAM,EAAE;EAAoB,CAAC,CAAC,CAAC,CAAC;;EAE/E,MAAMC,oBAAoB,GAAG,CAC3B,2BAA2B,EAC3B,2BAA2B,EAC3B,4BAA4B,CAC7B;EAED,MAAMC,gBAAgB,GAAIC,aAAa,IAAK;IAC1CR,aAAa,CAACQ,aAAa,CAAC;IAC5BX,YAAY,CAACY,OAAO,CAAC,oBAAoB,EAAED,aAAa,CAAC;IACzD;IACA;IACA,IAAIA,aAAa,KAAK,2BAA2B,EAAE;MACjDN,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;MACzBE,aAAa,CAAC;QAAEC,MAAM,EAAE;MAAoB,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,MAAM;MACLH,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;MACzBE,aAAa,CAAC;QAAEC,MAAM,EAAE;MAAoB,CAAC,CAAC,CAAC,CAAC;IAClD;EACF,CAAC;EAED,MAAMK,oBAAoB,GAAIF,aAAa,IAAK;IAC9CG,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAI,OAAMN,aAAc,GAAE;IAC7DG,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,cAAc,GAAG,OAAO;IAC5CJ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACG,kBAAkB,GAAG,QAAQ;IACjDL,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACI,gBAAgB,GAAG,WAAW;EACpD,CAAC;;EAED;EACA5B,SAAS,CAAC,MAAM;IACdqB,oBAAoB,CAACX,UAAU,CAAC;EAClC,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,oBACER,OAAA,CAACC,iBAAiB,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEpB,UAAU;MAAEO,oBAAoB;MAAEC,gBAAgB;MAAEN,SAAS;MAAEE;IAAW,CAAE;IAAAT,QAAA,EAC9GA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAAC5B,EAAA,CA3CWF,kBAAkB;AAAA+B,EAAA,GAAlB/B,kBAAkB;AA6C/B,OAAO,MAAMgC,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,OAAOvC,UAAU,CAACK,iBAAiB,CAAC;AACtC,CAAC;AAACkC,GAAA,CAFWD,aAAa;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}