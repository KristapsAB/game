{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krist\\\\OneDrive\\\\Desktop\\\\game-main (1)\\\\game-main\\\\src\\\\game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css';\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport star from './image/star.jpg';\nimport king from './image/king.jpg';\nimport queen from './image/queen.jpg';\nimport jack from './image/jack.jpg';\nimport rose from './image/rose.jpg';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const location = useLocation();\n  const levelConfig = location.state;\n  const symbols = [hearts, spade, diamondSide, Clubs, star, king, queen, jack, rose];\n  const numberOfCards = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.numberOfCards) || 12; // Adjust the default value as needed\n  const numberOfMatchesToWin = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.numberOfMatchesToWin) || 3;\n  const hintDelay = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.hintDelay) || 3000;\n  const gameDuration = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.gameDuration) || 120;\n  const navigate = useNavigate();\n  const [insufficientCoins, setInsufficientCoins] = useState(false);\n  console.log('Level Config:', levelConfig);\n  const generateRandomCards = () => {\n    const uniqueSymbols = Array.from(new Set(symbols));\n    const allSymbols = uniqueSymbols.concat(uniqueSymbols); // Duplicate the symbols array to ensure enough symbols\n\n    const initialCards = allSymbols.map((symbol, index) => ({\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      type: index\n    }));\n\n    // Shuffle the initial cards\n    const shuffledInitialCards = initialCards.sort(() => Math.random() - 0.5);\n\n    // Ensure that each symbol occurs exactly twice\n    const symbolCounts = new Map();\n    const shuffledCards = shuffledInitialCards.map(card => {\n      if (!symbolCounts.has(card.type)) {\n        symbolCounts.set(card.type, 1);\n        return card;\n      } else if (symbolCounts.get(card.type) < 2) {\n        symbolCounts.set(card.type, symbolCounts.get(card.type) + 1);\n        return card;\n      } else {\n        // If we already have two of this symbol, find the next symbol\n        const nextSymbol = uniqueSymbols.find(s => !symbolCounts.has(s) || symbolCounts.get(s) < 2);\n        symbolCounts.set(nextSymbol, (symbolCounts.get(nextSymbol) || 0) + 1);\n        return {\n          ...card,\n          img: nextSymbol,\n          type: uniqueSymbols.indexOf(nextSymbol)\n        };\n      }\n    });\n\n    // Shuffle the cards again to ensure randomness\n    const finalShuffledCards = shuffledCards.sort(() => Math.random() - 0.5);\n    return finalShuffledCards;\n  };\n  const handleRetry = () => {\n    setShowGiveUpPopup(false);\n    resetGame();\n  };\n  const [cards, setCards] = useState(generateRandomCards((levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.numberOfCards) || 12));\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n  const [showGiveUpPopup, setShowGiveUpPopup] = useState(false);\n  const [coins, setCoins] = useState(0); // State to store user's coins\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n\n    // Fetch user's coin balance\n    const fetchCoinBalance = async () => {\n      try {\n        const coinBalanceResponse = await fetch(`http://localhost/game/getUserCoins.php?userId=${storedUserId}`);\n        if (!coinBalanceResponse.ok) {\n          console.error(`HTTP error! Status: ${coinBalanceResponse.status}`);\n          console.log('Response text:', await coinBalanceResponse.text());\n          return;\n        }\n        const coinBalanceResult = await coinBalanceResponse.json();\n        if (coinBalanceResult.success) {\n          // Update user's coin balance in state\n          setCoins(coinBalanceResult.coins);\n        } else {\n          console.error('Failed to fetch coin balance:', coinBalanceResult.message);\n        }\n      } catch (error) {\n        console.error('Error fetching coin balance:', error);\n      }\n    };\n    if (storedUserId) {\n      fetchCoinBalance();\n    }\n  }, []);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If the game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n  useEffect(() => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setCards(prevCards => prevCards.map((card, i) => i === index ? {\n          ...card,\n          flipped: false\n        } : card));\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n    setShowGiveUpPopup(false); // Hide the \"Give Up\" popup on reset\n  };\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Check if the user has enough coins\n        if (coins > 0) {\n          // Deduct coins from the database\n          const url = 'http://localhost/game/deductCoinsForHint.php';\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: `userId=${userId}`,\n            credentials: 'include',\n            mode: 'cors'\n          });\n          if (!response.ok) {\n            console.error(`HTTP error! Status: ${response.status}`);\n            console.log('Response text:', await response.text());\n            return;\n          }\n          const result = await response.json();\n          if (result.success) {\n            // Coins deducted successfully, now reveal the cards\n            setHintUsed(true);\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => ({\n                ...card,\n                flipped: true\n              })));\n            }, 0);\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => ({\n                ...card,\n                flipped: card.matched ? true : false\n              })));\n              setHintUsed(false);\n            }, hintDelay);\n\n            // Update user's coin balance after using hint\n            const updatedCoinsResponse = await fetch(`http://localhost/game/getUserCoins.php?userId=${userId}`);\n            if (updatedCoinsResponse.ok) {\n              const updatedCoinsResult = await updatedCoinsResponse.json();\n              if (updatedCoinsResult.success) {\n                // Update user's coin balance in state\n                setCoins(updatedCoinsResult.coins);\n              } else {\n                console.error('Failed to fetch updated coin balance:', updatedCoinsResult.message);\n              }\n            } else {\n              console.error(`HTTP error! Status: ${updatedCoinsResponse.status}`);\n              console.log('Response text:', await updatedCoinsResponse.text());\n            }\n          } else {\n            console.error('Failed to deduct coins:', result.message);\n          }\n        } else {\n          // User doesn't have enough coins\n          console.log('User has 0 coins. Cannot use hint.');\n\n          // Display insufficient coins message\n          setInsufficientCoins(true);\n\n          // Hide the message after a few seconds (e.g., 3 seconds)\n          setTimeout(() => {\n            setInsufficientCoins(false);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      // Replace the URL with the actual URL of your PHP script\n      const url = 'http://localhost/game/saveScore.php';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include',\n        // Add this line\n        mode: 'cors' // Add this line\n      });\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Score updated successfully\n\n        // Check if the game is completed before adding coins\n        if (gameCompleted) {\n          const coinsEarned = 5;\n          const updateCoinsUrl = 'http://localhost/game/updateCoins.php'; // Replace with the actual URL\n          const updateCoinsResponse = await fetch(updateCoinsUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: `userId=${userId}&coins=${coinsEarned}`,\n            credentials: 'include',\n            // Add this line\n            mode: 'cors' // Add this line\n          });\n          if (!updateCoinsResponse.ok) {\n            console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n            console.log('Response text:', await updateCoinsResponse.text());\n            return;\n          }\n          const updateCoinsResult = await updateCoinsResponse.json();\n          if (updateCoinsResult.success) {\n            console.log('Coins updated successfully');\n          } else {\n            console.error('Failed to update coins:', updateCoinsResult.message);\n          }\n        }\n        console.log('Score updated successfully');\n\n        // Redirect to the start page\n        // navigate('/levels'); // Replace '/start' with the actual route of your start page\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const calculateScore = () => {\n    // Implement the logic to calculate the score based on game performance\n    // You might consider factors like time taken, hints used, etc.\n    // For simplicity, let's assume a basic score for now.\n    return gameDuration - timer;\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [showGiveUpPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Press Play Again to Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRetry,\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }, this), gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Congratulations! You finished the game in ${formatTime(timer)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGameCompletion,\n          children: \"Save Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Redirecting to Levels'),\n          children: \"Go to Levels Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }, this), insufficientCoins && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"corner-alert\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-message\",\n        children: \"Insufficient coins. Earn more to use hints\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: useHint,\n        disabled: hintUsed,\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowGiveUpPopup(true),\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container-80\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(index),\n          children: card.flipped && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderCornerSymbol(card.type), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.img,\n              alt: \"Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Time has expired, you lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"YXkur2MZ/P/u5M+cPZljIou05Nw=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Game;\nconst renderCornerSymbol = type => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symbol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text2\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","spade","diamondSide","Clubs","star","king","queen","jack","rose","useNavigate","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","location","levelConfig","state","symbols","numberOfCards","numberOfMatchesToWin","hintDelay","gameDuration","navigate","insufficientCoins","setInsufficientCoins","console","log","generateRandomCards","uniqueSymbols","Array","from","Set","allSymbols","concat","initialCards","map","symbol","index","id","Math","random","img","matched","type","shuffledInitialCards","sort","symbolCounts","Map","shuffledCards","card","has","set","get","nextSymbol","find","s","indexOf","finalShuffledCards","handleRetry","setShowGiveUpPopup","resetGame","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","checkingForMatch","setCheckingForMatch","hintUsed","setHintUsed","timer","setTimer","gameOver","setGameOver","gameCompleted","setGameCompleted","userId","setUserId","showGiveUpPopup","coins","setCoins","storedUserId","sessionStorage","getItem","fetchCoinBalance","coinBalanceResponse","fetch","ok","error","status","text","coinBalanceResult","json","success","message","setTimeout","checkForMatch","intervalId","setInterval","prevTimer","clearInterval","filter","length","handleCardClick","includes","prevCards","i","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","slice","forEach","checkForWin","useHint","url","response","method","headers","body","credentials","mode","result","updatedCoinsResponse","updatedCoinsResult","handleGameCompletion","level","score","calculateScore","coinsEarned","updateCoinsUrl","updateCoinsResponse","updateCoinsResult","formatTime","seconds","minutes","floor","remainingSeconds","formattedTime","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","disabled","renderCornerSymbol","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/krist/OneDrive/Desktop/game-main (1)/game-main/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css';\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport star from './image/star.jpg';\nimport king from './image/king.jpg';\nimport queen from './image/queen.jpg';\t\nimport jack from './image/jack.jpg';\nimport rose from './image/rose.jpg';\t\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst Game = () => {\n  const location = useLocation();\n  const levelConfig = location.state;\n  const symbols = [hearts, spade, diamondSide, Clubs, star, king, queen, jack,rose];\n  const numberOfCards = levelConfig?.numberOfCards || 12; // Adjust the default value as needed\n  const numberOfMatchesToWin = levelConfig?.numberOfMatchesToWin || 3;\n  const hintDelay = levelConfig?.hintDelay || 3000;\n  const gameDuration = levelConfig?.gameDuration || 120;\n  const navigate = useNavigate();\n  const [insufficientCoins, setInsufficientCoins] = useState(false);\n\n  console.log('Level Config:', levelConfig);\n  const generateRandomCards = () => {\n    const uniqueSymbols = Array.from(new Set(symbols));\n    const allSymbols = uniqueSymbols.concat(uniqueSymbols); // Duplicate the symbols array to ensure enough symbols\n  \n    const initialCards = allSymbols.map((symbol, index) => ({\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      type: index,\n    }));\n  \n    // Shuffle the initial cards\n    const shuffledInitialCards = initialCards.sort(() => Math.random() - 0.5);\n  \n    // Ensure that each symbol occurs exactly twice\n    const symbolCounts = new Map();\n    const shuffledCards = shuffledInitialCards.map((card) => {\n      if (!symbolCounts.has(card.type)) {\n        symbolCounts.set(card.type, 1);\n        return card;\n      } else if (symbolCounts.get(card.type) < 2) {\n        symbolCounts.set(card.type, symbolCounts.get(card.type) + 1);\n        return card;\n      } else {\n        // If we already have two of this symbol, find the next symbol\n        const nextSymbol = uniqueSymbols.find(\n          (s) => !symbolCounts.has(s) || symbolCounts.get(s) < 2\n        );\n        symbolCounts.set(nextSymbol, (symbolCounts.get(nextSymbol) || 0) + 1);\n        return { ...card, img: nextSymbol, type: uniqueSymbols.indexOf(nextSymbol) };\n      }\n    });\n  \n    // Shuffle the cards again to ensure randomness\n    const finalShuffledCards = shuffledCards.sort(() => Math.random() - 0.5);\n  \n    return finalShuffledCards;\n  };\n  \n  \n  \n  \n\n  \n\n  const handleRetry = () => {\n    setShowGiveUpPopup(false);\n    resetGame();\n  };\n\n  const [cards, setCards] = useState(generateRandomCards(levelConfig?.numberOfCards || 12));\n\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n  const [showGiveUpPopup, setShowGiveUpPopup] = useState(false);\n  const [coins, setCoins] = useState(0); // State to store user's coins\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n\n    // Fetch user's coin balance\n    const fetchCoinBalance = async () => {\n      try {\n        const coinBalanceResponse = await fetch(\n          `http://localhost/game/getUserCoins.php?userId=${storedUserId}`\n        );\n\n        if (!coinBalanceResponse.ok) {\n          console.error(`HTTP error! Status: ${coinBalanceResponse.status}`);\n          console.log('Response text:', await coinBalanceResponse.text());\n          return;\n        }\n\n        const coinBalanceResult = await coinBalanceResponse.json();\n\n        if (coinBalanceResult.success) {\n          // Update user's coin balance in state\n          setCoins(coinBalanceResult.coins);\n        } else {\n          console.error('Failed to fetch coin balance:', coinBalanceResult.message);\n        }\n      } catch (error) {\n        console.error('Error fetching coin balance:', error);\n      }\n    };\n\n    if (storedUserId) {\n      fetchCoinBalance();\n    }\n  }, []); \n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If the game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n\n  useEffect(() => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === index ? { ...card, flipped: false } : card\n          )\n        );\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n    setShowGiveUpPopup(false); // Hide the \"Give Up\" popup on reset\n  };\n\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Check if the user has enough coins\n        if (coins > 0) {\n          // Deduct coins from the database\n          const url = 'http://localhost/game/deductCoinsForHint.php';\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: `userId=${userId}`,\n            credentials: 'include',\n            mode: 'cors',\n          });\n  \n          if (!response.ok) {\n            console.error(`HTTP error! Status: ${response.status}`);\n            console.log('Response text:', await response.text());\n            return;\n          }\n  \n          const result = await response.json();\n  \n          if (result.success) {\n            // Coins deducted successfully, now reveal the cards\n            setHintUsed(true);\n  \n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) => ({ ...card, flipped: true }))\n              );\n            }, 0);\n  \n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) => ({\n                  ...card,\n                  flipped: card.matched ? true : false,\n                }))\n              );\n              setHintUsed(false);\n            }, hintDelay);\n  \n            // Update user's coin balance after using hint\n            const updatedCoinsResponse = await fetch(\n              `http://localhost/game/getUserCoins.php?userId=${userId}`\n            );\n  \n            if (updatedCoinsResponse.ok) {\n              const updatedCoinsResult = await updatedCoinsResponse.json();\n              if (updatedCoinsResult.success) {\n                // Update user's coin balance in state\n                setCoins(updatedCoinsResult.coins);\n              } else {\n                console.error('Failed to fetch updated coin balance:', updatedCoinsResult.message);\n              }\n            } else {\n              console.error(`HTTP error! Status: ${updatedCoinsResponse.status}`);\n              console.log('Response text:', await updatedCoinsResponse.text());\n            }\n          } else {\n            console.error('Failed to deduct coins:', result.message);\n          }\n        } else {\n          // User doesn't have enough coins\n          console.log('User has 0 coins. Cannot use hint.');\n  \n          // Display insufficient coins message\n          setInsufficientCoins(true);\n  \n          // Hide the message after a few seconds (e.g., 3 seconds)\n          setTimeout(() => {\n            setInsufficientCoins(false);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  \n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      // Replace the URL with the actual URL of your PHP script\n      const url = 'http://localhost/game/saveScore.php';\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include', // Add this line\n        mode: 'cors', // Add this line\n      });\n\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Score updated successfully\n\n        // Check if the game is completed before adding coins\n        if (gameCompleted) {\n          const coinsEarned = 5;\n\n          const updateCoinsUrl = 'http://localhost/game/updateCoins.php'; // Replace with the actual URL\n          const updateCoinsResponse = await fetch(updateCoinsUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: `userId=${userId}&coins=${coinsEarned}`,\n            credentials: 'include', // Add this line\n            mode: 'cors', // Add this line\n          });\n\n          if (!updateCoinsResponse.ok) {\n            console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n            console.log('Response text:', await updateCoinsResponse.text());\n            return;\n          }\n\n          const updateCoinsResult = await updateCoinsResponse.json();\n\n          if (updateCoinsResult.success) {\n            console.log('Coins updated successfully');\n          } else {\n            console.error('Failed to update coins:', updateCoinsResult.message);\n          }\n        }\n\n        console.log('Score updated successfully');\n\n        // Redirect to the start page\n        // navigate('/levels'); // Replace '/start' with the actual route of your start page\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const calculateScore = () => {\n    // Implement the logic to calculate the score based on game performance\n    // You might consider factors like time taken, hints used, etc.\n    // For simplicity, let's assume a basic score for now.\n    return gameDuration - timer;\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds\n      .toString()\n      .padStart(2, '0')}`;\n    return formattedTime;\n  };\n\n  return (\n    <div className=\"game-main\">\n      {showGiveUpPopup && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Press Play Again to Retry</p>\n            <button onClick={handleRetry}>Retry</button>\n          </div>\n        </div>\n      )}\n\n      {gameCompleted && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>{`Congratulations! You finished the game in ${formatTime(timer)}`}</p>\n            <button onClick={handleGameCompletion}>Save Score</button>\n            <button onClick={() => alert('Redirecting to Levels')}>Go to Levels Page</button>\n          </div>\n        </div>\n      )}\n\n      {insufficientCoins && (\n        <div className=\"corner-alert\">\n          <p className=\"alert-message\">Insufficient coins. Earn more to use hints</p>\n        </div>\n      )}\n      <div className=\"game-buttons\">\n        <button onClick={useHint} disabled={hintUsed}>\n          HINT\n        </button>\n        <div className=\"timer-container\">{formatTime(timer)}</div>\n        <button onClick={() => setShowGiveUpPopup(true)}>GIVE UP</button>\n      </div>\n\n      <div className=\"card-container\">\n        <div className=\"card-container-80\">\n          {cards.map((card, index) => (\n            <div\n              key={card.id}\n              className={`card1 ${card.flipped ? 'flipped' : ''} ${\n                card.matched ? 'matched' : ''\n              }`}\n              onClick={() => handleCardClick(index)}\n            >\n              {card.flipped && (\n                <>\n                  {renderCornerSymbol(card.type)}\n                  <img src={card.img} alt=\"Icon\" />\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      {gameOver && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Time has expired, you lost!</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst renderCornerSymbol = (type) => {\n  return (\n    <div className=\"symbol\">\n      <div className=\"top-left\">\n        <div className=\"text\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n      <div className=\"bottom-right\">\n        <div className=\"text2\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}