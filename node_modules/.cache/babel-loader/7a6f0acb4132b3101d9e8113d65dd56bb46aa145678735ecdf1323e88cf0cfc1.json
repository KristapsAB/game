{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game 2/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n  const navigate = useNavigate();\n  const generateRandomCards = () => {\n    const initialCards = symbols.map((symbol, index) => Array.from({\n      length: 3\n    }, () => ({\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      type: index\n    }))).flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n  }, []);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n  useEffect(() => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setCards(prevCards => prevCards.map((card, i) => i === index ? {\n          ...card,\n          flipped: false\n        } : card));\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n  };\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Specify the amount of coins to add\n        const coinsToAdd = 5;\n\n        // Deduct coins from the database\n        const url = 'http://localhost:8888/game/updateCoins.php';\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json' // Change content type to JSON\n          },\n          body: JSON.stringify({\n            userId,\n            coins: coinsToAdd\n          }),\n          // Send data as JSON\n          credentials: 'include',\n          mode: 'cors'\n        });\n        if (!response.ok) {\n          console.error(`HTTP error! Status: ${response.status}`);\n          console.log('Response text:', await response.text());\n          return;\n        }\n        const result = await response.json();\n        if (result.success) {\n          // Coins added successfully, now reveal the cards\n          setHintUsed(true);\n          setTimeout(() => {\n            setCards(prevCards => prevCards.map(card => ({\n              ...card,\n              flipped: true\n            })));\n          }, 0);\n          setTimeout(() => {\n            setCards(prevCards => prevCards.map(card => ({\n              ...card,\n              flipped: card.matched ? true : false\n            })));\n            setHintUsed(false);\n          }, hintDelay);\n        } else {\n          console.error('Failed to add coins:', result.message);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      // Replace the URL with the actual URL of your PHP script\n      const url = 'http://localhost:8888/game/saveScore.php';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include',\n        // Add this line\n        mode: 'cors' // Add this line\n      });\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Score updated successfully, now update the user's coins\n        const coinsEarned = 5;\n        const updateCoinsUrl = 'http://localhost:8888/game/updateCoins.php'; // Replace with the actual URL\n        const updateCoinsResponse = await fetch(updateCoinsUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: `userId=${userId}&coins=${coinsEarned}`,\n          credentials: 'include',\n          // Add this line\n          mode: 'cors' // Add this line\n        });\n        if (!updateCoinsResponse.ok) {\n          console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n          console.log('Response text:', await updateCoinsResponse.text());\n          return;\n        }\n        const updateCoinsResult = await updateCoinsResponse.json();\n        if (updateCoinsResult.success) {\n          console.log('Coins updated successfully');\n        } else {\n          console.error('Failed to update coins:', updateCoinsResult.message);\n        }\n        console.log('Score and Coins updated successfully');\n\n        // Redirect to the start page\n        navigate('/levels'); // Replace '/start' with the actual route of your start page\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const calculateScore = () => {\n    // Implement the logic to calculate the score based on game performance\n    // You might consider factors like time taken, hints used, etc.\n    // For simplicity, let's assume a basic score for now.\n    return gameDuration - timer;\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Congratulations! You finished the game in ${formatTime(timer)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGameCompletion,\n          children: \"Save Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Redirecting to Levels'),\n          children: \"Go to Levels Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: useHint,\n        disabled: hintUsed,\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n        onClick: () => handleCardClick(index),\n        children: card.flipped && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [renderCornerSymbol(card.type), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.img,\n            alt: \"Icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Time has expired, you lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"ifEmWzkZxhsVpgeFnzWcSvTNbVw=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nconst renderCornerSymbol = type => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symbol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text2\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","spade","diamondSide","Clubs","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","symbols","numberOfMatchesToWin","hintDelay","gameDuration","navigate","generateRandomCards","initialCards","map","symbol","index","Array","from","length","id","Math","random","img","matched","type","flat","sort","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","checkingForMatch","setCheckingForMatch","hintUsed","setHintUsed","timer","setTimer","gameOver","setGameOver","gameCompleted","setGameCompleted","userId","setUserId","storedUserId","sessionStorage","getItem","setTimeout","checkForMatch","intervalId","setInterval","prevTimer","clearInterval","filter","card","handleCardClick","includes","prevCards","i","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","slice","forEach","checkForWin","resetGame","useHint","coinsToAdd","url","response","fetch","method","headers","body","JSON","stringify","coins","credentials","mode","ok","console","error","status","log","text","result","json","success","message","handleGameCompletion","level","score","calculateScore","coinsEarned","updateCoinsUrl","updateCoinsResponse","updateCoinsResult","formatTime","seconds","minutes","floor","remainingSeconds","formattedTime","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","disabled","renderCornerSymbol","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game 2/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { useNavigate } from 'react-router-dom';\n\nconst Game = () => {\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n  const navigate = useNavigate();\n\n  const generateRandomCards = () => {\n    const initialCards = symbols\n      .map((symbol, index) =>\n        Array.from({ length: 3 }, () => ({\n          id: Math.random(),\n          img: symbol,\n          matched: false,\n          type: index,\n        }))\n      )\n      .flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n  }, []);\n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n\n  useEffect(() => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === index ? { ...card, flipped: false } : card\n          )\n        );\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n  };\n\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Specify the amount of coins to add\n        const coinsToAdd = 5;\n  \n        // Deduct coins from the database\n        const url = 'http://localhost:8888/game/updateCoins.php';\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json', // Change content type to JSON\n          },\n          body: JSON.stringify({ userId, coins: coinsToAdd }), // Send data as JSON\n          credentials: 'include',\n          mode: 'cors',\n        });\n  \n        if (!response.ok) {\n          console.error(`HTTP error! Status: ${response.status}`);\n          console.log('Response text:', await response.text());\n          return;\n        }\n  \n        const result = await response.json();\n  \n        if (result.success) {\n          // Coins added successfully, now reveal the cards\n          setHintUsed(true);\n  \n          setTimeout(() => {\n            setCards((prevCards) =>\n              prevCards.map((card) => ({ ...card, flipped: true }))\n            );\n          }, 0);\n  \n          setTimeout(() => {\n            setCards((prevCards) =>\n              prevCards.map((card) => ({\n                ...card,\n                flipped: card.matched ? true : false,\n              }))\n            );\n            setHintUsed(false);\n          }, hintDelay);\n        } else {\n          console.error('Failed to add coins:', result.message);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  \n\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n  \n      // Replace the URL with the actual URL of your PHP script\n      const url = 'http://localhost:8888/game/saveScore.php';\n  \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include', // Add this line\n        mode: 'cors', // Add this line\n      });\n  \n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n  \n      const result = await response.json();\n  \n      if (result.success) {\n        // Score updated successfully, now update the user's coins\n        const coinsEarned = 5;\n  \n        const updateCoinsUrl = 'http://localhost:8888/game/updateCoins.php'; // Replace with the actual URL\n        const updateCoinsResponse = await fetch(updateCoinsUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: `userId=${userId}&coins=${coinsEarned}`,\n          credentials: 'include', // Add this line\n          mode: 'cors', // Add this line\n        });\n  \n        if (!updateCoinsResponse.ok) {\n          console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n          console.log('Response text:', await updateCoinsResponse.text());\n          return;\n        }\n  \n        const updateCoinsResult = await updateCoinsResponse.json();\n  \n        if (updateCoinsResult.success) {\n          console.log('Coins updated successfully');\n        } else {\n          console.error('Failed to update coins:', updateCoinsResult.message);\n        }\n  \n        console.log('Score and Coins updated successfully');\n  \n        // Redirect to the start page\n        navigate('/levels'); // Replace '/start' with the actual route of your start page\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  \n  \n  \n\n  const calculateScore = () => {\n    // Implement the logic to calculate the score based on game performance\n    // You might consider factors like time taken, hints used, etc.\n    // For simplicity, let's assume a basic score for now.\n    return gameDuration - timer;\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds\n      .toString()\n      .padStart(2, '0')}`;\n    return formattedTime;\n  };\n\n  return (\n    <div className=\"game-main\">\n      {gameCompleted && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>{`Congratulations! You finished the game in ${formatTime(timer)}`}</p>\n            <button onClick={handleGameCompletion}>Save Score</button>\n            <button onClick={() => alert('Redirecting to Levels')}>Go to Levels Page</button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"game-buttons\">\n        <button onClick={useHint} disabled={hintUsed}>\n          HINT\n        </button>\n        <div className=\"timer-container\">{formatTime(timer)}</div>\n        <button onClick={resetGame}>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card, index) => (\n          <div\n            key={card.id}\n            className={`card1 ${card.flipped ? 'flipped' : ''} ${\n              card.matched ? 'matched' : ''\n            }`}\n            onClick={() => handleCardClick(index)}\n          >\n            {card.flipped && (\n              <>\n                {renderCornerSymbol(card.type)}\n                <img src={card.img} alt=\"Icon\" />\n              </>\n            )}\n          </div>\n        ))}\n      </div>\n      {gameOver && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Time has expired, you lost!</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst renderCornerSymbol = (type) => {\n  return (\n    <div className=\"symbol\">\n      <div className=\"top-left\">\n        <div className=\"text\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n      <div className=\"bottom-right\">\n        <div className=\"text2\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}