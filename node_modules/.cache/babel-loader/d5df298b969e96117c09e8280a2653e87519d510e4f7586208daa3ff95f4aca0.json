{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game 2/guess/src/FontSelector.js\";\n// FontSelector.js\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FontSelector = ({\n  selectedFont,\n  onFontChange\n}) => {\n  const fontOptions = ['Arial, sans-serif', 'Times New Roman, serif', 'Courier New, monospace', 'Georgia, serif', 'Verdana, sans-serif'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"fontSelect\",\n      children: \"Choose a font:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"fontSelect\",\n      value: selectedFont,\n      onChange: e => onFontChange(e.target.value),\n      children: fontOptions.map((font, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: font,\n        children: font.split(',')[0]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = FontSelector;\nexport default FontSelector;\nvar _c;\n$RefreshReg$(_c, \"FontSelector\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FontSelector","selectedFont","onFontChange","fontOptions","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","map","font","index","split","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game 2/guess/src/FontSelector.js"],"sourcesContent":["// FontSelector.js\n\nimport React from 'react';\n\nconst FontSelector = ({ selectedFont, onFontChange }) => {\n  const fontOptions = [\n    'Arial, sans-serif',\n    'Times New Roman, serif',\n    'Courier New, monospace',\n    'Georgia, serif',\n    'Verdana, sans-serif',\n  ];\n\n  return (\n    <div>\n      <label htmlFor=\"fontSelect\">Choose a font:</label>\n      <select id=\"fontSelect\" value={selectedFont} onChange={(e) => onFontChange(e.target.value)}>\n        {fontOptions.map((font, index) => (\n          <option key={index} value={font}>\n            {font.split(',')[0]}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default FontSelector;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAa,CAAC,KAAK;EACvD,MAAMC,WAAW,GAAG,CAClB,mBAAmB,EACnB,wBAAwB,EACxB,wBAAwB,EACxB,gBAAgB,EAChB,qBAAqB,CACtB;EAED,oBACEJ,OAAA;IAAAK,QAAA,gBACEL,OAAA;MAAOM,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAClDV,OAAA;MAAQW,EAAE,EAAC,YAAY;MAACC,KAAK,EAAEV,YAAa;MAACW,QAAQ,EAAGC,CAAC,IAAKX,YAAY,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAP,QAAA,EACxFD,WAAW,CAACY,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC3BlB,OAAA;QAAoBY,KAAK,EAAEK,IAAK;QAAAZ,QAAA,EAC7BY,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAAC,GADRD,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACU,EAAA,GArBInB,YAAY;AAuBlB,eAAeA,YAAY;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}