{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krist\\\\OneDrive\\\\Desktop\\\\windows-game-main\\\\windows-game-main\\\\src\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport './style/styles.css'; // Adjust the file path based on your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loginStatus, setLoginStatus] = useState(null);\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n  };\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n  const handleLogin = async () => {\n    try {\n      // Your login logic here\n    } catch (error) {\n      console.error('Error:', error);\n      setLoginStatus({\n        success: false,\n        message: 'Error during login. Please try again later.'\n      });\n    }\n  };\n  const handleRegister = () => {\n    navigate('/register');\n  };\n  const handleGoogleLoginSuccess = response => {\n    console.log('Google login success:', response);\n\n    // Check if the response contains the necessary fields\n    if (response && response.credential && response.clientId) {\n      var _response$profileObj;\n      // Extract necessary information from the response\n      const {\n        credential,\n        clientId\n      } = response;\n\n      // Decode the credential if necessary\n      const decodedCredential = decodeCredential(credential);\n\n      // Extract the email from the decoded credential or other available fields\n      const emailFromCredential = (decodedCredential === null || decodedCredential === void 0 ? void 0 : decodedCredential.email) || null;\n      const emailFromProfile = (response === null || response === void 0 ? void 0 : (_response$profileObj = response.profileObj) === null || _response$profileObj === void 0 ? void 0 : _response$profileObj.email) || null;\n      console.log('Email from credential:', emailFromCredential);\n      console.log('Email from profile:', emailFromProfile);\n      if (emailFromCredential || emailFromProfile) {\n        const email = emailFromCredential || emailFromProfile;\n        // Proceed with your login logic using the email\n        console.log('Email found:', email);\n      } else {\n        console.error('Email not found in Google authentication response');\n        // Handle the scenario where email information is not available\n      }\n    } else {\n      console.error('Incomplete Google authentication response:', response);\n      // Handle the scenario where response is incomplete\n    }\n  };\n\n  // Function to decode the JWT credential if necessary\n  const decodeCredential = credential => {\n    // Implement your decoding logic here\n    // Return the decoded credential or null if unable to decode\n  };\n  const handleGoogleLoginFailure = error => {\n    console.error('Google login failed:', error);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: email,\n        onChange: handleEmailChange,\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: handlePasswordChange,\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), loginStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `login-message ${loginStatus.success ? 'success' : 'error'}`,\n      children: loginStatus.success ? 'Login successful' : loginStatus.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"google-login\",\n      children: /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n        clientId: \"916183960867-podcm2n2nil1q66r019e53o02d8obb2h.apps.googleusercontent.com\",\n        children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          onSuccess: handleGoogleLoginSuccess,\n          onFailure: handleGoogleLoginFailure,\n          buttonText: \"Login with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-link\",\n      children: [\"Not a user? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/register\",\n        onClick: handleRegister,\n        children: \"Register now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"T933VBGoN11rCIcukEUDYvjuMGE=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","Login","_s","navigate","email","setEmail","password","setPassword","loginStatus","setLoginStatus","handleEmailChange","e","target","value","handlePasswordChange","handleLogin","error","console","success","message","handleRegister","handleGoogleLoginSuccess","response","log","credential","clientId","_response$profileObj","decodedCredential","decodeCredential","emailFromCredential","emailFromProfile","profileObj","handleGoogleLoginFailure","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","onSuccess","onFailure","buttonText","href","_c","$RefreshReg$"],"sources":["C:/Users/krist/OneDrive/Desktop/windows-game-main/windows-game-main/src/Login.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport './style/styles.css'; // Adjust the file path based on your project structure\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loginStatus, setLoginStatus] = useState(null);\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const handleLogin = async () => {\n    try {\n      // Your login logic here\n    } catch (error) {\n      console.error('Error:', error);\n      setLoginStatus({\n        success: false,\n        message: 'Error during login. Please try again later.',\n      });\n    }\n  };\n\n  const handleRegister = () => {\n    navigate('/register');\n  };\n  \n  const handleGoogleLoginSuccess = (response) => {\n    console.log('Google login success:', response);\n    \n    // Check if the response contains the necessary fields\n    if (response && response.credential && response.clientId) {\n      // Extract necessary information from the response\n      const { credential, clientId } = response;\n      \n      // Decode the credential if necessary\n      const decodedCredential = decodeCredential(credential);\n      \n      // Extract the email from the decoded credential or other available fields\n      const emailFromCredential = decodedCredential?.email || null;\n      const emailFromProfile = response?.profileObj?.email || null;\n  \n      console.log('Email from credential:', emailFromCredential);\n      console.log('Email from profile:', emailFromProfile);\n  \n      if (emailFromCredential || emailFromProfile) {\n        const email = emailFromCredential || emailFromProfile;\n        // Proceed with your login logic using the email\n        console.log('Email found:', email);\n      } else {\n        console.error('Email not found in Google authentication response');\n        // Handle the scenario where email information is not available\n      }\n    } else {\n      console.error('Incomplete Google authentication response:', response);\n      // Handle the scenario where response is incomplete\n    }\n  };\n  \n  // Function to decode the JWT credential if necessary\n  const decodeCredential = (credential) => {\n    // Implement your decoding logic here\n    // Return the decoded credential or null if unable to decode\n  };\n  \n  \n  const handleGoogleLoginFailure = (error) => {\n    console.error('Google login failed:', error);\n  };\n\n  return (\n    <div className=\"login-main\">\n      <h2>Login</h2>\n      <form>\n        <input type=\"email\" value={email} onChange={handleEmailChange} placeholder=\"Email\" />\n        <br />\n        <input type=\"password\" value={password} onChange={handlePasswordChange} placeholder=\"Password\" />\n        <br />\n        <div className=\"button\">\n          <button type=\"button\" onClick={handleLogin}>\n            Login\n          </button>\n        </div>\n      </form>\n\n      {loginStatus && (\n        <div className={`login-message ${loginStatus.success ? 'success' : 'error'}`}>\n          {loginStatus.success\n            ? 'Login successful'\n            : loginStatus.message}\n        </div>\n      )}\n\n      <div className=\"google-login\">\n        <GoogleOAuthProvider clientId=\"916183960867-podcm2n2nil1q66r019e53o02d8obb2h.apps.googleusercontent.com\">\n          <GoogleLogin\n            onSuccess={handleGoogleLoginSuccess}\n            onFailure={handleGoogleLoginFailure}\n            buttonText=\"Login with Google\"\n          />\n        </GoogleOAuthProvider>\n      </div>\n\n      <div className=\"register-link\">\n        Not a user? <a href=\"/register\" onClick={handleRegister}>Register now</a>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}