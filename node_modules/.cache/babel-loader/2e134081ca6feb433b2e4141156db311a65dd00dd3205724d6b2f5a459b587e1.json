{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n  const userId = sessionStorage.getItem('userId'); // Fetch user ID from sessionStorage\n\n  const generateRandomCards = () => {\n    const initialCards = symbols.map((symbol, index) => Array.from({\n      length: 3\n    }, () => ({\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      type: index\n    }))).flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n  useEffect(() => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setCards(prevCards => prevCards.map((card, i) => i === index ? {\n          ...card,\n          flipped: false\n        } : card));\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      setGameCompleted(true);\n      handleGameCompletion(); // Call the scoring function when the game is completed\n    }\n  };\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n  };\n  const useHint = () => {\n    if (!hintUsed) {\n      const firstUnmatchedIndex = cards.findIndex(card => !card.matched && !card.flipped);\n      if (firstUnmatchedIndex !== -1) {\n        setHintUsed(true);\n        setCards(prevCards => prevCards.map((card, i) => i === firstUnmatchedIndex ? {\n          ...card,\n          flipped: true\n        } : card));\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map((card, i) => i === firstUnmatchedIndex ? {\n            ...card,\n            flipped: false\n          } : card));\n        }, hintDelay);\n      }\n    }\n  };\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      console.log('UserId:', userId);\n      console.log('Level:', level);\n      console.log('Score:', score);\n      const response = await fetch(`http://localhost:8888/game/insertScore.php?id=${userId}&level=${level}&score=${score}`, {\n        method: 'POST',\n        credentials: 'omit'\n      });\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n      const resultText = await response.text();\n      console.log('Raw result text:', resultText);\n      const result = JSON.parse(resultText);\n      if (result.success) {\n        console.log('Score updated successfully');\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const calculateScore = () => {\n    // Implement your scoring logic based on game performance\n    // For example, you can consider factors like time taken, hints used, etc.\n    // Return the calculated score.\n    // This is just a placeholder, replace it with your actual scoring logic.\n    return 1000;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Congratulations! You finished the game in ${formatTime(timer)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Navigate to levels page'),\n          children: \"Go to Levels Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: useHint,\n        disabled: hintUsed,\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n        onClick: () => handleCardClick(index),\n        children: card.flipped && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [renderCornerSymbol(card.type), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: card.img,\n            alt: \"Icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Time has expired, you lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"HCczm5zL/E2E6hm9dQhiiv+yagA=\");\n_c = Game;\nconst renderCornerSymbol = type => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symbol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text2\",\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), type === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 24\n      }, this), type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2660\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 24\n      }, this), type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2666\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 24\n      }, this), type === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2663\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 24\n      }, this), type === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: \"\\u2665\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\nconst formatTime = seconds => {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  return formattedTime;\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","spade","diamondSide","Clubs","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","symbols","numberOfMatchesToWin","hintDelay","gameDuration","userId","sessionStorage","getItem","generateRandomCards","initialCards","map","symbol","index","Array","from","length","id","Math","random","img","matched","type","flat","sort","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","checkingForMatch","setCheckingForMatch","hintUsed","setHintUsed","timer","setTimer","gameOver","setGameOver","gameCompleted","setGameCompleted","setTimeout","checkForMatch","intervalId","setInterval","prevTimer","clearInterval","filter","card","handleCardClick","includes","prevCards","i","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","slice","forEach","checkForWin","handleGameCompletion","resetGame","useHint","firstUnmatchedIndex","findIndex","level","score","calculateScore","console","log","response","fetch","method","credentials","ok","error","status","text","resultText","result","JSON","parse","success","message","className","children","formatTime","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","disabled","renderCornerSymbol","src","alt","_c","seconds","minutes","floor","remainingSeconds","formattedTime","toString","padStart","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst Game = () => {\n  const symbols = [hearts, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const hintDelay = 3000; // milliseconds for hint delay\n  const gameDuration = 120; // seconds for game duration\n  const userId = sessionStorage.getItem('userId'); // Fetch user ID from sessionStorage\n\n  const generateRandomCards = () => {\n    const initialCards = symbols\n      .map((symbol, index) =>\n        Array.from({ length: 3 }, () => ({\n          id: Math.random(),\n          img: symbol,\n          matched: false,\n          type: index,\n        }))\n      )\n      .flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n\n  useEffect(() => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === index ? { ...card, flipped: false } : card\n          )\n        );\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      setGameCompleted(true);\n      handleGameCompletion(); // Call the scoring function when the game is completed\n    }\n  };\n\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n  };\n\n  const useHint = () => {\n    if (!hintUsed) {\n      const firstUnmatchedIndex = cards.findIndex((card) => !card.matched && !card.flipped);\n      if (firstUnmatchedIndex !== -1) {\n        setHintUsed(true);\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === firstUnmatchedIndex ? { ...card, flipped: true } : card\n          )\n        );\n        setTimeout(() => {\n          setCards((prevCards) =>\n            prevCards.map((card, i) =>\n              i === firstUnmatchedIndex ? { ...card, flipped: false } : card\n            )\n          );\n        }, hintDelay);\n      }\n    }\n  };\n\n  const handleGameCompletion = async () => {\n    try {\n      const level = 1; // Replace with the actual level\n      const score = calculateScore(); // Implement a function to calculate the score\n\n      console.log('UserId:', userId);\n      console.log('Level:', level);\n      console.log('Score:', score);\n      const response = await fetch(\n        `http://localhost:8888/game/insertScore.php?id=${userId}&level=${level}&score=${score}`,\n        {\n          method: 'POST',\n          credentials: 'omit',\n        }\n      );\n\n      if (!response.ok) {\n        console.error(`HTTP error! Status: ${response.status}`);\n        console.log('Response text:', await response.text());\n        return;\n      }\n\n      const resultText = await response.text();\n      console.log('Raw result text:', resultText);\n\n      const result = JSON.parse(resultText);\n\n      if (result.success) {\n        console.log('Score updated successfully');\n      } else {\n        console.error('Failed to update score:', result.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const calculateScore = () => {\n    // Implement your scoring logic based on game performance\n    // For example, you can consider factors like time taken, hints used, etc.\n    // Return the calculated score.\n    // This is just a placeholder, replace it with your actual scoring logic.\n    return 1000;\n  };\n\n  return (\n    <div className=\"game-main\">\n      {gameCompleted && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>{`Congratulations! You finished the game in ${formatTime(timer)}`}</p>\n            <button onClick={() => alert('Navigate to levels page')}>Go to Levels Page</button>\n          </div>\n        </div>\n      )}\n      <div className=\"game-buttons\">\n        <button onClick={useHint} disabled={hintUsed}>\n          HINT\n        </button>\n        <div className=\"timer-container\">{formatTime(timer)}</div>\n        <button onClick={resetGame}>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card, index) => (\n          <div\n            key={card.id}\n            className={`card1 ${card.flipped ? 'flipped' : ''} ${\n              card.matched ? 'matched' : ''\n            }`}\n            onClick={() => handleCardClick(index)}\n          >\n            {card.flipped && (\n              <>\n                {renderCornerSymbol(card.type)}\n                <img src={card.img} alt=\"Icon\" />\n              </>\n            )}\n          </div>\n        ))}\n      </div>\n      {gameOver && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Time has expired, you lost!</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst renderCornerSymbol = (type) => {\n  return (\n    <div className=\"symbol\">\n      <div className=\"top-left\">\n        <div className=\"text\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n      <div className=\"bottom-right\">\n        <div className=\"text2\">A</div>\n        {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>}\n      </div>\n    </div>\n  );\n};\n\nconst formatTime = (seconds) => {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds\n    .toString()\n    .padStart(2, '0')}`;\n  return formattedTime;\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}