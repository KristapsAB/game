{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    // Initialize the cards and shuffle them\n    const initialCards = initializeCards();\n    setCards(shuffleCards(initialCards));\n\n    // Start the timer\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  const initializeCards = () => {\n    // Create an array of card objects with unique IDs\n    const cardValues = ['A', 'A', 'A', 'A', 'A', 'A'];\n    return cardValues.map((value, index) => ({\n      id: index,\n      value,\n      isFlipped: false\n    }));\n  };\n  const shuffleCards = cardsArray => {\n    // Shuffle the array using Fisher-Yates algorithm\n    for (let i = cardsArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [cardsArray[i], cardsArray[j]] = [cardsArray[j], cardsArray[i]];\n    }\n    return cardsArray;\n  };\n  const handleCardClick = index => {\n    if (flipped.length === 2) {\n      // Check for a match\n      const [firstCard, secondCard] = flipped;\n      if (firstCard.value === secondCard.value) {\n        setMatched([...matched, firstCard.id, secondCard.id]);\n      }\n\n      // Reset flipped cards after a short delay\n      setTimeout(() => setFlipped([]), 1000);\n    } else {\n      // Flip the clicked card\n      setFlipped([...flipped, cards[index]]);\n    }\n  };\n  const isCardFlipped = cardId => flipped.some(card => card.id === cardId);\n  const isCardMatched = cardId => matched.includes(cardId);\n  const isGameOver = matched.length === cards.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: [Math.floor(timer / 60).toString().padStart(2, '0'), \":\", (timer % 60).toString().padStart(2, '0')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${isCardFlipped(card.id) || isCardMatched(card.id) ? 'flipped' : ''}`,\n        onClick: () => !isCardFlipped(card.id) && handleCardClick(index),\n        children: isCardFlipped(card.id) || isCardMatched(card.id) ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-text-second\",\n          children: card.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-text-first\",\n            children: card.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-text-second\",\n            children: card.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: \"Congratulations! You've won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"u+T5SZ3Uc+bujZWHg5kR1lhhzJk=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","cards","setCards","flipped","setFlipped","matched","setMatched","timer","setTimer","initialCards","initializeCards","shuffleCards","intervalId","setInterval","prevTimer","clearInterval","cardValues","map","value","index","id","isFlipped","cardsArray","i","length","j","Math","floor","random","handleCardClick","firstCard","secondCard","setTimeout","isCardFlipped","cardId","some","card","isCardMatched","includes","isGameOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toString","padStart","onClick","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\n\nconst Game = () => {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    // Initialize the cards and shuffle them\n    const initialCards = initializeCards();\n    setCards(shuffleCards(initialCards));\n\n    // Start the timer\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => prevTimer + 1);\n    }, 1000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const initializeCards = () => {\n    // Create an array of card objects with unique IDs\n    const cardValues = ['A', 'A', 'A', 'A', 'A', 'A'];\n    return cardValues.map((value, index) => ({\n      id: index,\n      value,\n      isFlipped: false,\n    }));\n  };\n\n  const shuffleCards = (cardsArray) => {\n    // Shuffle the array using Fisher-Yates algorithm\n    for (let i = cardsArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [cardsArray[i], cardsArray[j]] = [cardsArray[j], cardsArray[i]];\n    }\n    return cardsArray;\n  };\n\n  const handleCardClick = (index) => {\n    if (flipped.length === 2) {\n      // Check for a match\n      const [firstCard, secondCard] = flipped;\n      if (firstCard.value === secondCard.value) {\n        setMatched([...matched, firstCard.id, secondCard.id]);\n      }\n\n      // Reset flipped cards after a short delay\n      setTimeout(() => setFlipped([]), 1000);\n    } else {\n      // Flip the clicked card\n      setFlipped([...flipped, cards[index]]);\n    }\n  };\n\n  const isCardFlipped = (cardId) => flipped.some((card) => card.id === cardId);\n\n  const isCardMatched = (cardId) => matched.includes(cardId);\n\n  const isGameOver = matched.length === cards.length;\n\n  return (\n    <div className=\"game-main\">\n      <div className='game-buttons'>\n        <button>HINT</button>\n        <div className=\"timer-container\">\n          {Math.floor(timer / 60).toString().padStart(2, '0')}:{(timer % 60).toString().padStart(2, '0')}\n        </div>\n        <button>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card, index) => (\n          <div\n            key={index}\n            className={`card1 ${isCardFlipped(card.id) || isCardMatched(card.id) ? 'flipped' : ''}`}\n            onClick={() => !isCardFlipped(card.id) && handleCardClick(index)}\n          >\n            {isCardFlipped(card.id) || isCardMatched(card.id) ? (\n              <div className=\"card-text-second\">{card.value}</div>\n            ) : (\n              <>\n                <div className=\"card-text-first\">{card.value}</div>\n                <div className=\"card-text-second\">{card.value}</div>\n              </>\n            )}\n          </div>\n        ))}\n      </div>\n      {isGameOver && <div className=\"game-over\">Congratulations! You've won!</div>}\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}