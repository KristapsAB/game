{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const symbols = [heart164, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n  const generateRandomCards = () => {\n    const initialCards = symbols.map(symbol => [{\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      color: 'red'\n    }, {\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      color: 'blue'\n    }, {\n      id: Math.random(),\n      img: symbol,\n      matched: false,\n      color: 'green'\n    }]).flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin) {\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index)) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map((card, i) => i === index ? {\n            ...card,\n            flipped: false\n          } : card));\n        }, 500); // Adjust the delay as needed\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      alert('Congratulations! You found all matching symbols.');\n      // You can reset the game or perform other actions upon winning\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: \"02:69\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n        style: {\n          backgroundColor: card.color\n        },\n        onClick: () => handleCardClick(index),\n        children: card.flipped && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.img,\n          alt: \"Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 30\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"y+lvuQuIcPBuJ02Bg1SS9CqsE9k=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","heart164","spade","diamondSide","Clubs","jsxDEV","_jsxDEV","Game","_s","symbols","numberOfMatchesToWin","generateRandomCards","initialCards","map","symbol","id","Math","random","img","matched","color","flat","sort","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","setTimeout","checkForMatch","handleCardClick","index","includes","prevCards","card","i","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","length","slice","forEach","checkForWin","filter","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css'; // Adjust the file path based on your project structure\nimport hearts from './image/heart.png';\nimport heart164 from './image/sirds.png';\nimport spade from './image/spade.png';\nimport diamondSide from './image/diamond-side.png';\nimport Clubs from './image/clubs.png';\n\nconst Game = () => {\n  const symbols = [heart164, spade, diamondSide, Clubs];\n  const numberOfMatchesToWin = 3;\n\n  const generateRandomCards = () => {\n    const initialCards = symbols\n      .map((symbol) => [\n        { id: Math.random(), img: symbol, matched: false, color: 'red' },\n        { id: Math.random(), img: symbol, matched: false, color: 'blue' },\n        { id: Math.random(), img: symbol, matched: false, color: 'green' },\n      ])\n      .flat();\n\n    // Shuffle the cards\n    return initialCards.sort(() => Math.random() - 0.5);\n  };\n\n  const [cards, setCards] = useState(generateRandomCards());\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin) {\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index)) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setTimeout(() => {\n          setCards((prevCards) =>\n            prevCards.map((card, i) =>\n              i === index ? { ...card, flipped: false } : card\n            )\n          );\n        }, 500); // Adjust the delay as needed\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      alert('Congratulations! You found all matching symbols.');\n      // You can reset the game or perform other actions upon winning\n    }\n  };\n\n  return (\n    <div className=\"game-main\">\n      <div className=\"game-buttons\">\n        <button>HINT</button>\n        <div className=\"timer-container\">02:69</div>\n        <button>GIVE UP</button>\n      </div>\n      <div className=\"card-container\">\n        {cards.map((card, index) => (\n          <div\n            key={card.id}\n            className={`card1 ${card.flipped ? 'flipped' : ''} ${\n              card.matched ? 'matched' : ''\n            }`}\n            style={{ backgroundColor: card.color }}\n            onClick={() => handleCardClick(index)}\n          >\n            {card.flipped && <img src={card.img} alt=\"Icon\" />}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}