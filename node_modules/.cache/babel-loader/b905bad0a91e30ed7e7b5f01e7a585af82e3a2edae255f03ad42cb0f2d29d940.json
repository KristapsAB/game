{"ast":null,"code":"var _jsxFileName = \"/Users/kirillkicenko/Desktop/guess-game/guess/windows-game/src/game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './style/game.css';\nimport hearts from './image/Frame 1(1).png';\nimport spade from './image/Frame 1(2).png';\nimport diamondSide from './image/Frame 1(4).png';\nimport Clubs from './image/Frame 1(3).png';\nimport star from './image/Frame 1(9).png';\nimport king from './image/Frame 1(10).png';\nimport queen from './image/Frame 1(6).png';\nimport jack from './image/Frame 1(8).png';\nimport rose from './image/Frame 1(7).png';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const location = useLocation();\n  const levelConfig = location.state;\n  const symbols = [hearts, spade, diamondSide, Clubs, star, king, queen, jack, rose];\n  const numberOfCards = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.numberOfCards) || 12; // Adjust the default value as needed\n  const numberOfMatchesToWin = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.numberOfMatchesToWin) || 3;\n  const hintDelay = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.hintDelay) || 3000;\n  const gameDuration = (levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.gameDuration) || 120;\n  const navigate = useNavigate();\n  const [insufficientCoins, setInsufficientCoins] = useState(false);\n\n  // console.log('Level Config:', levelConfig);\n  const generateRandomCards = () => {\n    const allSymbols = [...symbols]; // Make a copy of the symbols array\n    const symbolCounts = new Map();\n\n    // Shuffle the symbols array to randomize the order\n    const shuffledSymbols = allSymbols.sort(() => Math.random() - 0.5);\n    const matchingPairs = shuffledSymbols.slice(0, numberOfMatchesToWin);\n    let initialCards = matchingPairs.flatMap((symbol, index) => {\n      const matchingCards = Array.from({\n        length: numberOfCards / numberOfMatchesToWin\n      }, (_, i) => {\n        if (!symbolCounts.has(symbol)) {\n          symbolCounts.set(symbol, 1);\n        } else if (symbolCounts.get(symbol) < numberOfMatchesToWin) {\n          symbolCounts.set(symbol, symbolCounts.get(symbol) + 1);\n        } else {\n          // Find the next available symbol that hasn't reached its limit\n          const nextSymbolIndex = shuffledSymbols.findIndex(s => !symbolCounts.has(s) || symbolCounts.get(s) < numberOfMatchesToWin);\n          if (nextSymbolIndex !== -1) {\n            const nextSymbol = shuffledSymbols[nextSymbolIndex];\n            symbolCounts.set(nextSymbol, (symbolCounts.get(nextSymbol) || 0) + 1);\n            symbol = nextSymbol;\n          } else {\n            // If all symbols are used, throw an error indicating an invalid configuration\n            throw new Error('Invalid level configuration: Not enough unique symbols for required matches.');\n          }\n        }\n        return {\n          id: Math.random(),\n          img: symbol,\n          matched: false,\n          type: index\n        };\n      });\n      return matchingCards;\n    });\n\n    // Shuffle the initialCards array\n    initialCards = initialCards.sort(() => Math.random() - 0.5);\n    return initialCards;\n  };\n  const handleRetry = () => {\n    setShowGiveUpPopup(false);\n    resetGame();\n  };\n  const [cards, setCards] = useState(generateRandomCards((levelConfig === null || levelConfig === void 0 ? void 0 : levelConfig.numberOfCards) || 12));\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n  const [showGiveUpPopup, setShowGiveUpPopup] = useState(false);\n  const [coins, setCoins] = useState(0); // State to store user's coins\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n\n    // Fetch user's coin balance\n    const fetchCoinBalance = async () => {\n      try {\n        const coinBalanceResponse = await fetch(`http://localhost:8888/game/getUserCoins.php?userId=${storedUserId}`);\n        if (!coinBalanceResponse.ok) {\n          console.error(`HTTP error! Status: ${coinBalanceResponse.status}`);\n          console.log('Response text:', await coinBalanceResponse.text());\n          return;\n        }\n        const coinBalanceResult = await coinBalanceResponse.json();\n        if (coinBalanceResult.success) {\n          // Update user's coin balance in state\n          setCoins(coinBalanceResult.coins);\n        } else {\n          console.error('Failed to fetch coin balance:', coinBalanceResult.message);\n        }\n      } catch (error) {\n        console.error('Error fetching coin balance:', error);\n      }\n    };\n    if (storedUserId) {\n      fetchCoinBalance();\n    }\n  }, []);\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If the game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n  useEffect(() => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n  const handleCardClick = index => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards(prevCards => prevCards.map((card, i) => i === index ? {\n        ...card,\n        flipped: true\n      } : card));\n      setFlippedCount(prevCount => prevCount + 1);\n      setFlippedIndexes(prevIndexes => [...prevIndexes, index]);\n    }\n  };\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n    setCards(prevCards => prevCards.map((card, i) => flippedIndexesCopy.includes(i) ? {\n      ...card,\n      flipped: match,\n      matched: match\n    } : card));\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach(index => {\n        setCards(prevCards => prevCards.map((card, i) => i === index ? {\n          ...card,\n          flipped: false\n        } : card));\n      });\n    }\n    if (match) {\n      checkForWin();\n    }\n  };\n  const checkForWin = () => {\n    if (cards.filter(card => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n    setShowGiveUpPopup(false); // Hide the \"Give Up\" popup on reset\n  };\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Check if the user has enough coins\n        if (coins > 0) {\n          // Deduct coins from the database\n          const url = 'http://localhost:8888/game/deductCoinsForHint.php';\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: `userId=${userId}`,\n            credentials: 'include',\n            mode: 'cors'\n          });\n          if (!response.ok) {\n            console.error(`HTTP error! Status: ${response.status}`);\n            console.log('Response text:', await response.text());\n            return;\n          }\n          const result = await response.json();\n          if (result.success) {\n            // Coins deducted successfully, now reveal the cards\n            setHintUsed(true);\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => ({\n                ...card,\n                flipped: true\n              })));\n            }, 0);\n            setTimeout(() => {\n              setCards(prevCards => prevCards.map(card => ({\n                ...card,\n                flipped: card.matched ? true : false\n              })));\n              setHintUsed(false);\n            }, hintDelay);\n\n            // Update user's coin balance after using hint\n            const updatedCoinsResponse = await fetch(`http://localhost:8888/game/getUserCoins.php?userId=${userId}`);\n            if (updatedCoinsResponse.ok) {\n              const updatedCoinsResult = await updatedCoinsResponse.json();\n              if (updatedCoinsResult.success) {\n                // Update user's coin balance in state\n                setCoins(updatedCoinsResult.coins);\n              } else {\n                console.error('Failed to fetch updated coin balance:', updatedCoinsResult.message);\n              }\n            } else {\n              console.error(`HTTP error! Status: ${updatedCoinsResponse.status}`);\n              console.log('Response text:', await updatedCoinsResponse.text());\n            }\n          } else {\n            console.error('Failed to deduct coins:', result.message);\n          }\n        } else {\n          // User doesn't have enough coins\n          console.log('User has 0 coins. Cannot use hint.');\n\n          // Display insufficient coins message\n          setInsufficientCoins(true);\n\n          // Hide the message after a few seconds (e.g., 3 seconds)\n          setTimeout(() => {\n            setInsufficientCoins(false);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleGameCompletion = async () => {\n    try {\n      const level = levelConfig.levelNumber; // Get the level number from levelConfig\n      const score = calculateScore(); // Calculate the score for the completed level\n\n      // URL for saving the score\n      const saveScoreUrl = 'http://localhost:8888/game/saveScore.php';\n      const saveScoreResponse = await fetch(saveScoreUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include',\n        mode: 'cors'\n      });\n      if (!saveScoreResponse.ok) {\n        console.error(`HTTP error! Status: ${saveScoreResponse.status}`);\n        console.log('Response text:', await saveScoreResponse.text());\n        return;\n      }\n      const saveScoreResult = await saveScoreResponse.json();\n      if (!saveScoreResult.success) {\n        console.error('Failed to save score:', saveScoreResult.message);\n        return;\n      }\n      console.log('Score saved successfully');\n\n      // URL for updating the coins\n      const updateCoinsUrl = 'http://localhost:8888/game/updateCoins.php';\n      const updateCoinsResponse = await fetch(updateCoinsUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `userId=${userId}&level=${level}`,\n        credentials: 'include',\n        mode: 'cors'\n      });\n      if (!updateCoinsResponse.ok) {\n        console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n        console.log('Response text:', await updateCoinsResponse.text());\n        return;\n      }\n      const updateCoinsResult = await updateCoinsResponse.json();\n      if (!updateCoinsResult.success) {\n        console.error('Failed to update coins:', updateCoinsResult.message);\n        return;\n      }\n      const {\n        coinsEarned\n      } = updateCoinsResult; // Get the coins earned from the response\n\n      // Update the user's coins in state\n      setCoins(prevCoins => prevCoins + coinsEarned);\n      console.log('Coins updated successfully');\n\n      // Redirect to the levels page or any other appropriate page\n      navigate('/levels');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const calculateScore = () => {\n    return gameDuration - timer;\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-main\",\n    children: [showGiveUpPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Press Play Again to Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRetry,\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }, this), gameCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"victory-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blur\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"victory-popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Congratulations!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You finished the game in \", formatTime(timer)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGameCompletion,\n            children: \"Save Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => alert('Redirecting to Levels'),\n            children: \"Go to Levels Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"coin-rain-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 3\n    }, this), insufficientCoins && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"corner-alert\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-message\",\n        children: \"Insufficient coins. Earn more to use hints\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: useHint,\n        disabled: hintUsed,\n        children: \"HINT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowGiveUpPopup(true),\n        children: \"GIVE UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-container-80\",\n        children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card1 ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(index),\n          children: card.flipped && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderCornerSymbol(card.type), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.img,\n              alt: \"Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Time has expired, you lost!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"YXkur2MZ/P/u5M+cPZljIou05Nw=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Game;\nconst renderCornerSymbol = type => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"symbol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 492,\n    columnNumber: 5\n  }, this);\n};\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","hearts","spade","diamondSide","Clubs","star","king","queen","jack","rose","useNavigate","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","location","levelConfig","state","symbols","numberOfCards","numberOfMatchesToWin","hintDelay","gameDuration","navigate","insufficientCoins","setInsufficientCoins","generateRandomCards","allSymbols","symbolCounts","Map","shuffledSymbols","sort","Math","random","matchingPairs","slice","initialCards","flatMap","symbol","index","matchingCards","Array","from","length","_","i","has","set","get","nextSymbolIndex","findIndex","s","nextSymbol","Error","id","img","matched","type","handleRetry","setShowGiveUpPopup","resetGame","cards","setCards","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","checkingForMatch","setCheckingForMatch","hintUsed","setHintUsed","timer","setTimer","gameOver","setGameOver","gameCompleted","setGameCompleted","userId","setUserId","showGiveUpPopup","coins","setCoins","storedUserId","sessionStorage","getItem","fetchCoinBalance","coinBalanceResponse","fetch","ok","console","error","status","log","text","coinBalanceResult","json","success","message","setTimeout","checkForMatch","intervalId","setInterval","prevTimer","clearInterval","filter","card","handleCardClick","includes","prevCards","map","flipped","prevCount","prevIndexes","flippedIndexesCopy","match","forEach","checkForWin","useHint","url","response","method","headers","body","credentials","mode","result","updatedCoinsResponse","updatedCoinsResult","handleGameCompletion","level","levelNumber","score","calculateScore","saveScoreUrl","saveScoreResponse","saveScoreResult","updateCoinsUrl","updateCoinsResponse","updateCoinsResult","coinsEarned","prevCoins","formatTime","seconds","minutes","floor","remainingSeconds","formattedTime","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","disabled","renderCornerSymbol","src","alt","_c","$RefreshReg$"],"sources":["/Users/kirillkicenko/Desktop/guess-game/guess/windows-game/src/game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './style/game.css';\nimport hearts from './image/Frame 1(1).png';\nimport spade from './image/Frame 1(2).png';\nimport diamondSide from './image/Frame 1(4).png';\nimport Clubs from './image/Frame 1(3).png';\nimport star from './image/Frame 1(9).png';\nimport king from './image/Frame 1(10).png';\nimport queen from './image/Frame 1(6).png';\t\nimport jack from './image/Frame 1(8).png';\nimport rose from './image/Frame 1(7).png';\t\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nconst Game = () => {\n  const location = useLocation();\n  const levelConfig = location.state;\n  const symbols = [hearts, spade, diamondSide, Clubs, star, king, queen, jack,rose];\n  const numberOfCards = levelConfig?.numberOfCards || 12; // Adjust the default value as needed\n  const numberOfMatchesToWin = levelConfig?.numberOfMatchesToWin || 3;\n  const hintDelay = levelConfig?.hintDelay || 3000;\n  const gameDuration = levelConfig?.gameDuration || 120;\n  const navigate = useNavigate();\n  const [insufficientCoins, setInsufficientCoins] = useState(false);\n\n  // console.log('Level Config:', levelConfig);\n  const generateRandomCards = () => {\n    const allSymbols = [...symbols]; // Make a copy of the symbols array\n    const symbolCounts = new Map();\n  \n    // Shuffle the symbols array to randomize the order\n    const shuffledSymbols = allSymbols.sort(() => Math.random() - 0.5);\n  \n    const matchingPairs = shuffledSymbols.slice(0, numberOfMatchesToWin);\n  \n    let initialCards = matchingPairs.flatMap((symbol, index) => {\n      const matchingCards = Array.from(\n        { length: numberOfCards / numberOfMatchesToWin },\n        (_, i) => {\n          if (!symbolCounts.has(symbol)) {\n            symbolCounts.set(symbol, 1);\n          } else if (symbolCounts.get(symbol) < numberOfMatchesToWin) {\n            symbolCounts.set(symbol, symbolCounts.get(symbol) + 1);\n          } else {\n            // Find the next available symbol that hasn't reached its limit\n            const nextSymbolIndex = shuffledSymbols.findIndex(\n              (s) => !symbolCounts.has(s) || symbolCounts.get(s) < numberOfMatchesToWin\n            );\n            if (nextSymbolIndex !== -1) {\n              const nextSymbol = shuffledSymbols[nextSymbolIndex];\n              symbolCounts.set(nextSymbol, (symbolCounts.get(nextSymbol) || 0) + 1);\n              symbol = nextSymbol;\n            } else {\n              // If all symbols are used, throw an error indicating an invalid configuration\n              throw new Error(\n                'Invalid level configuration: Not enough unique symbols for required matches.'\n              );\n            }\n          }\n  \n          return {\n            id: Math.random(),\n            img: symbol,\n            matched: false,\n            type: index,\n          };\n        }\n      );\n  \n      return matchingCards;\n    });\n  \n    // Shuffle the initialCards array\n    initialCards = initialCards.sort(() => Math.random() - 0.5);\n  \n    return initialCards;\n  };\n  \n  \n  \n  const handleRetry = () => {\n    setShowGiveUpPopup(false);\n    resetGame();\n  };\n\n  const [cards, setCards] = useState(generateRandomCards(levelConfig?.numberOfCards || 12));\n\n  const [flippedCount, setFlippedCount] = useState(0);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [checkingForMatch, setCheckingForMatch] = useState(false);\n  const [hintUsed, setHintUsed] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [userId, setUserId] = useState(\"\"); // State to store user ID\n  const [showGiveUpPopup, setShowGiveUpPopup] = useState(false);\n  const [coins, setCoins] = useState(0); // State to store user's coins\n\n  useEffect(() => {\n    // Fetch userId from sessionStorage\n    const storedUserId = sessionStorage.getItem('userId');\n    setUserId(storedUserId);\n\n    // Fetch user's coin balance\n    const fetchCoinBalance = async () => {\n      try {\n        const coinBalanceResponse = await fetch(\n          `http://localhost:8888/game/getUserCoins.php?userId=${storedUserId}`\n        );\n\n        if (!coinBalanceResponse.ok) {\n          console.error(`HTTP error! Status: ${coinBalanceResponse.status}`);\n          console.log('Response text:', await coinBalanceResponse.text());\n          return;\n        }\n\n        const coinBalanceResult = await coinBalanceResponse.json();\n\n        if (coinBalanceResult.success) {\n          // Update user's coin balance in state\n          setCoins(coinBalanceResult.coins);\n        } else {\n          console.error('Failed to fetch coin balance:', coinBalanceResult.message);\n        }\n      } catch (error) {\n        console.error('Error fetching coin balance:', error);\n      }\n    };\n\n    if (storedUserId) {\n      fetchCoinBalance();\n    }\n  }, []); \n\n  useEffect(() => {\n    if (flippedCount === numberOfMatchesToWin && !checkingForMatch) {\n      setCheckingForMatch(true);\n      setTimeout(() => checkForMatch(), 1000);\n    }\n  }, [flippedCount, checkingForMatch]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer >= gameDuration) {\n          // Game duration reached, end the game\n          setGameOver(true);\n          clearInterval(intervalId);\n          return gameDuration; // Ensure the timer stops at 2:00\n        }\n        if (gameCompleted) {\n          // If the game is completed, stop the timer\n          clearInterval(intervalId);\n          return prevTimer;\n        }\n        return prevTimer + 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timer, gameDuration, gameCompleted]);\n\n  useEffect(() => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      // All cards matched, set gameCompleted to true\n      setGameCompleted(true);\n    }\n  }, [cards]);\n\n  const handleCardClick = (index) => {\n    if (!cards[index].matched && !flippedIndexes.includes(index) && !checkingForMatch) {\n      setCards((prevCards) =>\n        prevCards.map((card, i) =>\n          i === index ? { ...card, flipped: true } : card\n        )\n      );\n      setFlippedCount((prevCount) => prevCount + 1);\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, index]);\n    }\n  };\n\n  const checkForMatch = () => {\n    const flippedIndexesCopy = [...flippedIndexes];\n    let match = true;\n\n    for (let i = 1; i < flippedIndexesCopy.length; i++) {\n      if (cards[flippedIndexesCopy[i]].img !== cards[flippedIndexesCopy[0]].img) {\n        match = false;\n        break;\n      }\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card, i) =>\n        flippedIndexesCopy.includes(i)\n          ? { ...card, flipped: match, matched: match }\n          : card\n      )\n    );\n\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n\n    if (!match) {\n      // If not a match, instantly flip the first two cards back\n      flippedIndexesCopy.slice(0, 2).forEach((index) => {\n        setCards((prevCards) =>\n          prevCards.map((card, i) =>\n            i === index ? { ...card, flipped: false } : card\n          )\n        );\n      });\n    }\n\n    if (match) {\n      checkForWin();\n    }\n  };\n\n  const checkForWin = () => {\n    if (cards.filter((card) => card.matched).length === cards.length) {\n      setGameCompleted(true);\n    }\n  };\n\n  const resetGame = () => {\n    setCards(generateRandomCards());\n    setFlippedCount(0);\n    setFlippedIndexes([]);\n    setCheckingForMatch(false);\n    setHintUsed(false);\n    setTimer(0);\n    setGameOver(false);\n    setGameCompleted(false);\n    setShowGiveUpPopup(false); // Hide the \"Give Up\" popup on reset\n  };\n\n  const useHint = async () => {\n    if (!hintUsed) {\n      try {\n        // Check if the user has enough coins\n        if (coins > 0) {\n          // Deduct coins from the database\n          const url = 'http://localhost:8888/game/deductCoinsForHint.php';\n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: `userId=${userId}`,\n            credentials: 'include',\n            mode: 'cors',\n          });\n  \n          if (!response.ok) {\n            console.error(`HTTP error! Status: ${response.status}`);\n            console.log('Response text:', await response.text());\n            return;\n          }\n  \n          const result = await response.json();\n  \n          if (result.success) {\n            // Coins deducted successfully, now reveal the cards\n            setHintUsed(true);\n  \n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) => ({ ...card, flipped: true }))\n              );\n            }, 0);\n  \n            setTimeout(() => {\n              setCards((prevCards) =>\n                prevCards.map((card) => ({\n                  ...card,\n                  flipped: card.matched ? true : false,\n                }))\n              );\n              setHintUsed(false);\n            }, hintDelay);\n  \n            // Update user's coin balance after using hint\n            const updatedCoinsResponse = await fetch(\n              `http://localhost:8888/game/getUserCoins.php?userId=${userId}`\n            );\n  \n            if (updatedCoinsResponse.ok) {\n              const updatedCoinsResult = await updatedCoinsResponse.json();\n              if (updatedCoinsResult.success) {\n                // Update user's coin balance in state\n                setCoins(updatedCoinsResult.coins);\n              } else {\n                console.error('Failed to fetch updated coin balance:', updatedCoinsResult.message);\n              }\n            } else {\n              console.error(`HTTP error! Status: ${updatedCoinsResponse.status}`);\n              console.log('Response text:', await updatedCoinsResponse.text());\n            }\n          } else {\n            console.error('Failed to deduct coins:', result.message);\n          }\n        } else {\n          // User doesn't have enough coins\n          console.log('User has 0 coins. Cannot use hint.');\n  \n          // Display insufficient coins message\n          setInsufficientCoins(true);\n  \n          // Hide the message after a few seconds (e.g., 3 seconds)\n          setTimeout(() => {\n            setInsufficientCoins(false);\n          }, 3000);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  \n  const handleGameCompletion = async () => {\n    try {\n      const level = levelConfig.levelNumber; // Get the level number from levelConfig\n      const score = calculateScore(); // Calculate the score for the completed level\n  \n      // URL for saving the score\n      const saveScoreUrl = 'http://localhost:8888/game/saveScore.php';\n      const saveScoreResponse = await fetch(saveScoreUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `userId=${userId}&level=${level}&score=${score}`,\n        credentials: 'include',\n        mode: 'cors',\n      });\n  \n      if (!saveScoreResponse.ok) {\n        console.error(`HTTP error! Status: ${saveScoreResponse.status}`);\n        console.log('Response text:', await saveScoreResponse.text());\n        return;\n      }\n  \n      const saveScoreResult = await saveScoreResponse.json();\n  \n      if (!saveScoreResult.success) {\n        console.error('Failed to save score:', saveScoreResult.message);\n        return;\n      }\n  \n      console.log('Score saved successfully');\n  \n      // URL for updating the coins\n      const updateCoinsUrl = 'http://localhost:8888/game/updateCoins.php';\n      const updateCoinsResponse = await fetch(updateCoinsUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: `userId=${userId}&level=${level}`,\n        credentials: 'include',\n        mode: 'cors',\n      });\n  \n      if (!updateCoinsResponse.ok) {\n        console.error(`HTTP error! Status: ${updateCoinsResponse.status}`);\n        console.log('Response text:', await updateCoinsResponse.text());\n        return;\n      }\n  \n      const updateCoinsResult = await updateCoinsResponse.json();\n  \n      if (!updateCoinsResult.success) {\n        console.error('Failed to update coins:', updateCoinsResult.message);\n        return;\n      }\n  \n      const { coinsEarned } = updateCoinsResult; // Get the coins earned from the response\n  \n      // Update the user's coins in state\n      setCoins(prevCoins => prevCoins + coinsEarned);\n  \n      console.log('Coins updated successfully');\n  \n      // Redirect to the levels page or any other appropriate page\n      navigate('/levels');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  \n\n  const calculateScore = () => {\n    return gameDuration - timer;\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds\n      .toString()\n      .padStart(2, '0')}`;\n    return formattedTime;\n  };\n\n  return (\n    <div className=\"game-main\">\n      {showGiveUpPopup && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Press Play Again to Retry</p>\n            <button onClick={handleRetry}>Retry</button>\n          </div>\n        </div>\n      )}\n\n{gameCompleted && (\n  <div className=\"victory-overlay\">\n    <div className=\"blur\">\n      <div className=\"victory-popup\">\n        <p>Congratulations!</p>\n        <p>You finished the game in {formatTime(timer)}</p>\n        <button onClick={handleGameCompletion}>Save Score</button>\n        <button onClick={() => alert('Redirecting to Levels')}>Go to Levels Page</button>\n        <div className=\"coin-rain-container\">\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n          <div className=\"coin\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n)}\n\n\n\n\n      {insufficientCoins && (\n        <div className=\"corner-alert\">\n          <p className=\"alert-message\">Insufficient coins. Earn more to use hints</p>\n        </div>\n      )}\n      <div className=\"game-buttons\">\n        <button onClick={useHint} disabled={hintUsed}>\n          HINT\n        </button>\n        <div className=\"timer-container\">{formatTime(timer)}</div>\n        <button onClick={() => setShowGiveUpPopup(true)}>GIVE UP</button>\n        \n      </div>\n\n      <div className=\"card-container\">\n        <div className=\"card-container-80\">\n          {cards.map((card, index) => (\n            <div\n              key={card.id}\n              className={`card1 ${card.flipped ? 'flipped' : ''} ${\n                card.matched ? 'matched' : ''\n              }`}\n              onClick={() => handleCardClick(index)}\n            >\n              {card.flipped && (\n                <>\n                  {renderCornerSymbol(card.type)}\n                  <img src={card.img} alt=\"Icon\" />\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      {gameOver && (\n        <div className=\"blur\">\n          <div className=\"popup\">\n            <p>Time has expired, you lost!</p>\n            <button onClick={resetGame}>Play Again</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst renderCornerSymbol = (type) => {\n  return (\n    <div className=\"symbol\">\n      <div className=\"top-left\">\n        {/* {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>} */}\n      </div>\n      <div className=\"bottom-right\">\n        {/* {type === 0 && <div className=\"icon\">&#x2665;</div>}\n        {type === 1 && <div className=\"icon\">&#x2660;</div>}\n        {type === 2 && <div className=\"icon\">&#x2666;</div>}\n        {type === 3 && <div className=\"icon\">&#x2663;</div>}\n        {type === 4 && <div className=\"icon\">&#x2665;</div>} */}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}